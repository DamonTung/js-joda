{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 14249e3ac9fb85a9f098","webpack:///external {\"amd\":\"js-joda\",\"commonjs\":\"js-joda\",\"commonjs2\":\"js-joda\",\"root\":\"JSJoda\"}","webpack:///external {\"amd\":\"cldr-data\",\"commonjs\":\"cldr-data\",\"commonjs2\":\"cldr-data\",\"root\":\"cldrData\"}","webpack:///external {\"amd\":\"cldrjs\",\"commonjs\":\"cldrjs\",\"commonjs2\":\"cldrjs\",\"root\":\"Cldr\"}","webpack:///./src/Locale.js","webpack:///./src/format/LocaleStore.js","webpack:///./src/temporal/WeekFields.js","webpack:///./src/js-joda-locale.js","webpack:///./src/plug.js","webpack:///./src/format/cldr/CldrDateTimeFormatterBuilder.js","webpack:///./src/format/parser/TextPrinterParser.js","webpack:///./src/format/cldr/CldrDateTimeTextProvider.js","webpack:///./src/format/cldr/CldrZoneTextPrinterParser.js","webpack:///./src/format/parser/LocalizedOffsetPrinterParser.js","webpack:///./src/format/parser/WeekFieldsPrinterParser.js","webpack:///./src/format/LocaleDateTimeFormatter.js","webpack:///./src/_init.js"],"names":["_init","Locale","language","country","localeString","_language","_country","_localeString","length","other","ENGLISH","US","UK","CANADA","FRENCH","FRANCE","GERMAN","GERMANY","createEntry","text","field","key","value","toString","_comparator","obj1","obj2","LocaleStore","valueTextMap","_valueTextMap","map","allList","Object","keys","forEach","style","reverse","undefined","Number","parseInt","list","values","sort","concat","_parsable","Symbol","iterator","MathUtil","assert","requireNonNull","requireInstance","DAY_OF_WEEK_RANGE","of","WEEK_OF_MONTH_RANGE","WEEK_OF_YEAR_RANGE","WEEK_OF_WEEK_BASED_YEAR_RANGE","WEEK_BASED_YEAR_RANGE","YEAR","range","_weekDayMap","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","ComputedDayOfField","weekDef","DAYS","WEEKS","MONTHS","YEARS","WEEK_BASED_YEARS","FOREVER","name","baseUnit","rangeUnit","_name","_weekDef","_baseUnit","_rangeUnit","_range","temporal","sow","firstDayOfWeek","dow","_localizedDayOfWeek","_localizedWeekOfMonth","_localizedWeekOfYear","_localizedWOWBY","_localizedWBY","isoDow","get","DAY_OF_WEEK","floorMod","dom","DAY_OF_MONTH","offset","_startOfWeekOffset","_computeWeek","doy","DAY_OF_YEAR","woy","previous","from","minus","year","yearLen","isLeap","weekIndexOfFirstWeekNextYear","minimalDaysInFirstWeek","day","weekStart","newValue","newVal","checkValidIntValue","currentVal","baseWowby","weekOfWeekBasedYear","diffWeeks","roundDown","result","plus","newWowby","delta","fieldValues","partialTemporal","resolverStyle","remove","localDow","put","containsKey","wby","date","days","LENIENT","wowby","dateDow","weeks","STRICT","getLong","MONTH_OF_YEAR","month","wom","isSupported","EPOCH_DAY","_rangeWOWBY","fieldRange","minimum","maximum","INSTANCE","locale","intDiv","WeekFieldsCache","Map","WeekFields","firstDayOrLocale","minDays","ofLocale","ofFirstDayOfWeekMinDays","load","cldr","weekData","firstDay","rules","set","_firstDayOfWeek","_minimalDays","_dayOfWeek","ofDayOfWeekField","_weekOfMonth","ofWeekOfMonthField","_weekOfYear","ofWeekOfYearField","_weekOfWeekBasedYear","ofWeekOfWeekBasedYearField","_weekBasedYear","ofWeekBasedYearField","object","hashCode","ordinal","ISO","SUNDAY_START","jsJoda","getOwnPropertyNames","prototype","prop","DateTimeFormatterBuilder","DateTimeFormatter","CldrDateTimeFormatterBuilder","styleOrMap","appendTextField","appendTextFieldStyle","appendTextFieldMap","FULL","textStyle","_appendInternal","textLookup","copy","assign","store","provider","getText","getTextIterator","count","SHORT","TextPrinterParser","_field","_textStyle","_provider","context","buf","getValue","_numberPrinterParser","print","append","parseText","position","isStrict","it","entry","itText","subSequenceEquals","setParsedField","parse","_currentNumberPrinterParser","NumberPrinterParser","NORMAL","CldrDateTimeTextProvider","_cache","availableLocales","_findStore","_createStore","monthsData","main","styleMap","data","wide","narrow","NARROW","abbreviated","_createLocaleStore","daysData","mon","tue","wed","thu","fri","sat","sun","AMPM_OF_DAY","dayPeriodsData","am","pm","ERA","erasData","eraNames","eraNarrow","eraAbbr","QUARTER_OF_YEAR","quartersData","FULL_STANDALONE","SHORT_STANDALONE","includes","NARROW_STANDALONE","LENGTH_COMPARATOR","str1","str2","cmp","localeCompare","CldrZoneTextPrinterParser","zoneId","type","mapZones","zoneData","metazoneInfo","metazone","metaZoneData","preferredZone","attributes","territory","_resolveZoneIdText","goldenZone","zone","getValueQuery","normalized","id","daylight","hasDaylightSupport","tzType","tzstyle","asNormal","metaZone","mapZone","_other","_territory","_type","ids","getAvailableZoneIds","genericText","standardText","daylightText","sortedKeys","setParsedZone","LocalizedOffsetPrinterParser","offsetSecs","OFFSET_SECONDS","OffsetIdPrinterParser","totalSecs","safeToInt","absHours","Math","abs","intMod","absMinutes","absSeconds","end","sign","charAt","negative","ch","hour","min","sec","StringBuilder","WeekFieldsPrinterParser","letter","_letter","_count","weekFields","pp","_evaluate","dayOfWeek","NOT_NEGATIVE","weekOfMonth","ReducedPrinterParser","weekBasedYear","BASE_DATE","EXCEEDS_PAD","sb","LocaleDateTimeFormatter","equals","_locale","_printerParser","_decimalStyle","_resolverStyle","_resolverFields","_chrono","_zone","isInit","init"],"mappings":"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","file":"js-joda-locale.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"js-joda\"), require(\"cldr-data\"), require(\"cldrjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"js-joda\", \"cldr-data\", \"cldrjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JSJodaLocale\"] = factory(require(\"js-joda\"), require(\"cldr-data\"), require(\"cldrjs\"));\n\telse\n\t\troot[\"JSJodaLocale\"] = factory(root[\"JSJoda\"], root[\"cldrData\"], root[\"Cldr\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 14249e3ac9fb85a9f098","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"amd\":\"js-joda\",\"commonjs\":\"js-joda\",\"commonjs2\":\"js-joda\",\"root\":\"JSJoda\"}\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"amd\":\"cldr-data\",\"commonjs\":\"cldr-data\",\"commonjs2\":\"cldr-data\",\"root\":\"cldrData\"}\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"amd\":\"cldrjs\",\"commonjs\":\"cldrjs\",\"commonjs2\":\"cldrjs\",\"root\":\"Cldr\"}\n// module id = 2\n// module chunks = 0","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\n\nexport default class Locale {\n    // TODO: maybe use new Cldr(<'en'>) constructor instead?\n    // see https://github.com/rxaviers/cldrjs#instantiate-a-locale-and-get-it-normalized\n    constructor(language, country = '', localeString = '') {\n        this._language = language;\n        this._country = country;\n        this._localeString = localeString;\n    }\n\n    language() {\n        return this._language;\n    }\n\n    country() {\n        return this._country;\n    }\n\n    localeString() {\n        if (this._localeString.length > 0) {\n            return this._localeString;\n        }\n        if (this._country.length > 0) {\n            return `${this._language}-${this._country}`;\n        } else {\n            return this._language;\n        }\n    }\n\n    toString() {\n        return `Locale[${this.localeString()}]`;\n    }\n\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        if (!(other instanceof Locale)) {\n            return false;\n        }\n        return this.localeString() === other.localeString();\n    }\n}\n\nexport function _init() {\n    //some samples/consts\n    Locale.ENGLISH = new Locale('en');\n    Locale.US = new Locale('en', 'US', 'en'); // default in cldr-data, no en-US\n    Locale.UK = new Locale('en', 'GB');\n    Locale.CANADA = new Locale('en', 'CA');\n    Locale.FRENCH = new Locale('fr');\n    Locale.FRANCE = new Locale('fr', 'FR', 'fr'); // default in cldr-data, no fr-FR\n    Locale.GERMAN = new Locale('de');\n    Locale.GERMANY = new Locale('de', 'DE', 'de'); // default in cldr-data, no de-DE\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Locale.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\n\n/**\n * Helper method to create an immutable entry.\n *\n * @param text  the text, not null\n * @param field  the field, not null\n * @return the entry, not null\n */\nexport const createEntry = (text, field) => {\n    return {\n        key: text,\n        value: field,\n        toString: function () {\n            return text + '->' + field;\n        }\n    };\n};\n\nconst _comparator = (obj1, obj2) => {\n    return obj2.key.length - obj1.key.length;  // longest to shortest\n};\n\n/**\n * Stores the text for a single locale.\n * <p>\n * Some fields have a textual representation, such as day-of-week or month-of-year.\n * These textual representations can be captured in this class for printing\n * and parsing.\n */\nexport class LocaleStore {\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor.\n     *\n     * @param {Object} valueTextMap  the map of values to text to store, assigned and not altered, not null\n     */\n    constructor(valueTextMap) {\n        this._valueTextMap = valueTextMap;\n        const map = {};\n        let allList = [];\n        Object.keys(valueTextMap).forEach((style) => {\n            const reverse = {};\n            Object.keys(valueTextMap[style]).forEach((key) => {\n                const value = valueTextMap[style][key];\n                if (reverse[value] === undefined) {\n                    reverse[value] = createEntry(value, Number.parseInt(key));\n                }\n            });\n            const list = Object.values(reverse);\n            list.sort(_comparator);\n            map[style] = list;\n            allList = allList.concat(list);\n            map[null] = allList;\n        });\n        allList.sort(_comparator);\n        this._parsable = map;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the text for the specified field value, locale and style\n     * for the purpose of printing.\n     *\n     * @param {Number} value  the value to get text for, not null\n     * @param {TextStyle} style  the style to get text for, not null\n     * @return the text for the field value, null if no text found\n     */\n    getText(value, style) {\n        const map = this._valueTextMap[style];\n        return map != null ? map[value] : null;\n    }\n\n    /**\n     * Gets an iterator of text to field for the specified style for the purpose of parsing.\n     * <p>\n     * The iterator must be returned in order from the longest text to the shortest.\n     *\n     * @param style  the style to get text for, null for all parsable text\n     * @return the iterator of text to field pairs, in order from longest text to shortest text,\n     *  null if the style is not parsable\n     */\n    getTextIterator(style) {\n        const list = this._parsable[style];\n        return list != null ? list[Symbol.iterator]() : null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/LocaleStore.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport {\n    _ as jodaInternal,\n    DateTimeException,\n    DayOfWeek,\n    ChronoField,\n    ChronoUnit,\n    IllegalArgumentException,\n    IllegalStateException,\n    IsoChronology,\n    IsoFields,\n    LocalDate,\n    ResolverStyle,\n    ValueRange,\n    Year\n} from 'js-joda';\nimport cldrData from 'cldr-data';\nimport Cldr from 'cldrjs';\n\nconst { MathUtil, assert: { requireNonNull, requireInstance } } = jodaInternal;\n\n//-----------------------------------------------------------------------\nconst DAY_OF_WEEK_RANGE = ValueRange.of(1, 7);\nconst WEEK_OF_MONTH_RANGE = ValueRange.of(0, 1, 4, 6);\nconst WEEK_OF_YEAR_RANGE = ValueRange.of(0, 1, 52, 54);\nconst WEEK_OF_WEEK_BASED_YEAR_RANGE = ValueRange.of(1, 52, 53);\nconst WEEK_BASED_YEAR_RANGE = ChronoField.YEAR.range();\n\n/* map from the string from cldr `firstDay()` to DayOfWeek */\nconst _weekDayMap = {\n    'mon': DayOfWeek.MONDAY,\n    'tue': DayOfWeek.TUESDAY,\n    'wed': DayOfWeek.WEDNESDAY,\n    'thu': DayOfWeek.THURSDAY,\n    'fri': DayOfWeek.FRIDAY,\n    'sat': DayOfWeek.SATURDAY,\n    'sun': DayOfWeek.SUNDAY,\n};\n\n/**\n * Field type that computes DayOfWeek, WeekOfMonth, and WeekOfYear\n * based on a WeekFields.\n * A separate Field instance is required for each different WeekFields;\n * combination of start of week and minimum number of days.\n * Constructors are provided to create fields for DayOfWeek, WeekOfMonth,\n * and WeekOfYear.\n */\nexport class ComputedDayOfField {\n\n    /**\n     * Returns a field to access the day of week,\n     * computed based on a WeekFields.\n     * <p>\n     * The WeekDefintion of the first day of the week is used with\n     * the ISO DAY_OF_WEEK field to compute week boundaries.\n     */\n    static ofDayOfWeekField(weekDef) {\n        return new ComputedDayOfField('DayOfWeek', weekDef,\n            ChronoUnit.DAYS, ChronoUnit.WEEKS, DAY_OF_WEEK_RANGE);\n    }\n\n    /**\n     * Returns a field to access the week of month,\n     * computed based on a WeekFields.\n     * @see WeekFields#weekOfMonth()\n     */\n    static ofWeekOfMonthField(weekDef) {\n        return new ComputedDayOfField('WeekOfMonth', weekDef,\n            ChronoUnit.WEEKS, ChronoUnit.MONTHS, WEEK_OF_MONTH_RANGE);\n    }\n\n    /**\n     * Returns a field to access the week of year,\n     * computed based on a WeekFields.\n     * @see WeekFields#weekOfYear()\n     */\n    static ofWeekOfYearField(weekDef) {\n        return new ComputedDayOfField('WeekOfYear', weekDef,\n            ChronoUnit.WEEKS, ChronoUnit.YEARS, WEEK_OF_YEAR_RANGE);\n    }\n\n    /**\n     * Returns a field to access the week of week-based-year,\n     * computed based on a WeekFields.\n     * @see WeekFields#weekOfWeekBasedYear()\n     */\n    static ofWeekOfWeekBasedYearField(weekDef) {\n        return new ComputedDayOfField('WeekOfWeekBasedYear', weekDef,\n            ChronoUnit.WEEKS, IsoFields.WEEK_BASED_YEARS, WEEK_OF_WEEK_BASED_YEAR_RANGE);\n    }\n\n    /**\n     * Returns a field to access the week-based-year,\n     * computed based on a WeekFields.\n     * @see WeekFields#weekBasedYear()\n     */\n    static ofWeekBasedYearField(weekDef) {\n        return new ComputedDayOfField('WeekBasedYear', weekDef,\n            IsoFields.WEEK_BASED_YEARS, ChronoUnit.FOREVER, WEEK_BASED_YEAR_RANGE);\n    }\n\n    /**\n     *@private\n     */\n    constructor(name, weekDef, baseUnit, rangeUnit, range) {\n        this._name = name;\n        this._weekDef = weekDef;\n        this._baseUnit = baseUnit;\n        this._rangeUnit = rangeUnit;\n        this._range = range;\n    }\n\n    getFrom(temporal) {\n        // Offset the ISO DOW by the start of this week\n        const sow = this._weekDef.firstDayOfWeek().value();\n        const dow = this._localizedDayOfWeek(temporal, sow);\n\n        if (this._rangeUnit === ChronoUnit.WEEKS) {\n            return dow;\n        } else if (this._rangeUnit === ChronoUnit.MONTHS) {\n            return this._localizedWeekOfMonth(temporal, dow);\n        } else if (this._rangeUnit === ChronoUnit.YEARS) {\n            return this._localizedWeekOfYear(temporal, dow);\n        } else if (this._rangeUnit === IsoFields.WEEK_BASED_YEARS) {\n            return this._localizedWOWBY(temporal);\n        } else if (this._rangeUnit === ChronoUnit.FOREVER) {\n            return this._localizedWBY(temporal);\n        } else {\n            throw new IllegalStateException('unreachable');\n        }\n    }\n\n    _localizedDayOfWeek(temporal, sow) {\n        const isoDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        return MathUtil.floorMod(isoDow - sow, 7) + 1;\n    }\n\n    _localizedWeekOfMonth(temporal, dow) {\n        const dom = temporal.get(ChronoField.DAY_OF_MONTH);\n        const offset = this._startOfWeekOffset(dom, dow);\n        return ComputedDayOfField._computeWeek(offset, dom);\n    }\n\n    _localizedWeekOfYear(temporal, dow) {\n        const doy = temporal.get(ChronoField.DAY_OF_YEAR);\n        const offset = this._startOfWeekOffset(doy, dow);\n        return ComputedDayOfField._computeWeek(offset, doy);\n    }\n\n    _localizedWOWBY(temporal) {\n        const sow = this._weekDef.firstDayOfWeek().value();\n        const isoDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n        const woy = this._localizedWeekOfYear(temporal, dow);\n        if (woy === 0) {\n            const previous = LocalDate.from(temporal).minus(1, ChronoUnit.WEEKS);\n            return this._localizedWeekOfYear(previous, dow) + 1;\n        } else if (woy >= 53) {\n            const offset = this._startOfWeekOffset(temporal.get(ChronoField.DAY_OF_YEAR), dow);\n            const year = temporal.get(ChronoField.YEAR);\n            const yearLen = Year.isLeap(year) ? 366 : 365;\n            const weekIndexOfFirstWeekNextYear = ComputedDayOfField._computeWeek(offset, yearLen + this._weekDef.minimalDaysInFirstWeek());\n            if (woy >= weekIndexOfFirstWeekNextYear) {\n                return (woy - (weekIndexOfFirstWeekNextYear - 1));\n            }\n        }\n        return woy;\n    }\n\n    _localizedWBY(temporal) {\n        const sow = this._weekDef.firstDayOfWeek().value();\n        const isoDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n        const year = temporal.get(ChronoField.YEAR);\n        const woy = this._localizedWeekOfYear(temporal, dow);\n        if (woy === 0) {\n            return year - 1;\n        } else if (woy < 53) {\n            return year;\n        }\n        const offset = this._startOfWeekOffset(temporal.get(ChronoField.DAY_OF_YEAR), dow);\n        const yearLen = Year.isLeap(year) ? 366 : 365;\n        const weekIndexOfFirstWeekNextYear = ComputedDayOfField._computeWeek(offset, yearLen + this._weekDef.minimalDaysInFirstWeek());\n        if (woy >= weekIndexOfFirstWeekNextYear) {\n            return year + 1;\n        }\n        return year;\n    }\n\n    /**\n     * Returns an offset to align week start with a day of month or day of year.\n     *\n     * @param day the day; 1 through infinity\n     * @param dow the day of the week of that day; 1 through 7\n     * @return an offset in days to align a day with the start of the first 'full' week\n     */\n    _startOfWeekOffset(day, dow) {\n        // offset of first day corresponding to the day of week in first 7 days (zero origin)\n        const weekStart = MathUtil.floorMod(day - dow, 7);\n        let offset = -weekStart;\n        if (weekStart + 1 > this._weekDef.minimalDaysInFirstWeek()) {\n            // The previous week has the minimum days in the current month to be a 'week'\n            offset = 7 - weekStart;\n        }\n        return offset;\n    }\n\n    /**\n     * Returns the week number computed from the reference day and reference dayOfWeek.\n     *\n     * @param offset the offset to align a date with the start of week\n     *     from {@link #startOfWeekOffset}.\n     * @param day  the day for which to compute the week number\n     * @return the week number where zero is used for a partial week and 1 for the first full week\n     */\n    static _computeWeek(offset, day) {\n        return MathUtil.intDiv((7 + offset + (day - 1)), 7);\n    }\n\n    adjustInto(temporal, newValue) {\n        // Check the new value and get the old value of the field\n        const newVal = this._range.checkValidIntValue(newValue, this);\n        const currentVal = temporal.get(this);\n        if (newVal === currentVal) {\n            return temporal;\n        }\n        if (this._rangeUnit === ChronoUnit.FOREVER) {\n            // adjust in whole weeks so dow never changes\n            const baseWowby = temporal.get(this._weekDef.weekOfWeekBasedYear());\n            const diffWeeks = MathUtil.roundDown((newValue - currentVal) * 52.1775);\n            let result = temporal.plus(diffWeeks, ChronoUnit.WEEKS);\n            if (result.get(this) > newVal) {\n                // ended up in later week-based-year\n                // move to last week of previous year\n                const newWowby = result.get(this._weekDef.weekOfWeekBasedYear());\n                result = result.minus(newWowby, ChronoUnit.WEEKS);\n            } else {\n                if (result.get(this) < newVal) {\n                    // ended up in earlier week-based-year\n                    result = result.plus(2, ChronoUnit.WEEKS);\n                }\n                // reset the week-of-week-based-year\n                const newWowby = result.get(this._weekDef.weekOfWeekBasedYear());\n                result = result.plus(baseWowby - newWowby, ChronoUnit.WEEKS);\n                if (result.get(this) > newVal) {\n                    result = result.minus(1, ChronoUnit.WEEKS);\n                }\n            }\n            return result;\n        }\n        // Compute the difference and add that using the base using of the field\n        const delta = newVal - currentVal;\n        return temporal.plus(delta, this._baseUnit);\n    }\n\n    resolve(fieldValues, partialTemporal, resolverStyle) {\n        const sow = this._weekDef.firstDayOfWeek().value();\n        if (this._rangeUnit === ChronoUnit.WEEKS) {  // day-of-week\n            const value = fieldValues.remove(this);\n            const localDow = this._range.checkValidIntValue(value, this);\n            const isoDow = MathUtil.floorMod((sow - 1) + (localDow - 1), 7) + 1;\n            fieldValues.put(ChronoField.DAY_OF_WEEK, isoDow);\n            return null;\n        }\n        if (fieldValues.containsKey(ChronoField.DAY_OF_WEEK) === false) {\n            return null;\n        }\n\n        // week-based-year\n        if (this._rangeUnit === ChronoUnit.FOREVER) {\n            if (fieldValues.containsKey(this._weekDef.weekOfWeekBasedYear()) === false) {\n                return null;\n            }\n            // const chrono = IsoChronology.INSTANCE; //TODO: Chronology.from(partialTemporal);  // defaults to ISO\n            const isoDow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.get(ChronoField.DAY_OF_WEEK));\n            const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n            const wby = this.range().checkValidIntValue(fieldValues.get(this), this);\n            let date;\n            let days;\n            if (resolverStyle === ResolverStyle.LENIENT) {\n                date = LocalDate.of(wby, 1, this._weekDef.minimalDaysInFirstWeek()); //TODO: chrono.date(wby, 1, this._weekDef.minimalDaysInFirstWeek());\n                const wowby = fieldValues.get(this._weekDef.weekOfWeekBasedYear());\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const weeks = wowby - this._localizedWeekOfYear(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            } else {\n                date = LocalDate.of(wby, 1, this._weekDef.minimalDaysInFirstWeek()); //TODO: chrono.date(wby, 1, this._weekDef.minimalDaysInFirstWeek());\n                const wowby = this._weekDef.weekOfWeekBasedYear().range().checkValidIntValue(\n                    fieldValues.get(this._weekDef.weekOfWeekBasedYear()), this._weekDef.weekOfWeekBasedYear);\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const weeks = wowby - this._localizedWeekOfYear(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            }\n            date = date.plus(days, ChronoUnit.DAYS);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                if (date.getLong(this) !== fieldValues.get(this)) {\n                    throw new DateTimeException('Strict mode rejected date parsed to a different year');\n                }\n            }\n            fieldValues.remove(this);\n            fieldValues.remove(this._weekDef.weekOfWeekBasedYear());\n            fieldValues.remove(ChronoField.DAY_OF_WEEK);\n            return date;\n        }\n\n        if (fieldValues.containsKey(ChronoField.YEAR) === false) {\n            return null;\n        }\n        const isoDow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.get(ChronoField.DAY_OF_WEEK));\n        const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n        const year = ChronoField.YEAR.checkValidIntValue(fieldValues.get(ChronoField.YEAR));\n        // const chrono = IsoChronology.INSTANCE; //TODO: Chronology.from(partialTemporal);  // defaults to ISO\n        if (this._rangeUnit === ChronoUnit.MONTHS) {  // week-of-month\n            if (fieldValues.containsKey(ChronoField.MONTH_OF_YEAR) === false) {\n                return null;\n            }\n            const value = fieldValues.remove(this);\n            let date;\n            let days;\n            if (resolverStyle === ResolverStyle.LENIENT) {\n                const month = fieldValues.get(ChronoField.MONTH_OF_YEAR);\n                date = LocalDate.of(year, 1, 1); // TODO: chrono.date(year, 1, 1);\n                date = date.plus(month - 1, ChronoUnit.MONTHS);\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const weeks = value - this._localizedWeekOfMonth(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            } else {\n                const month = ChronoField.MONTH_OF_YEAR.checkValidIntValue(fieldValues.get(ChronoField.MONTH_OF_YEAR));\n                date = LocalDate.of(year, month, 8); // TODO: chrono.date(year, month, 8);\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const wom = this._range.checkValidIntValue(value, this);\n                const weeks = wom - this._localizedWeekOfMonth(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            }\n            date = date.plus(days, ChronoUnit.DAYS);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                if (date.getLong(ChronoField.MONTH_OF_YEAR) !== fieldValues.get(ChronoField.MONTH_OF_YEAR)) {\n                    throw new DateTimeException('Strict mode rejected date parsed to a different month');\n                }\n            }\n            fieldValues.remove(this);\n            fieldValues.remove(ChronoField.YEAR);\n            fieldValues.remove(ChronoField.MONTH_OF_YEAR);\n            fieldValues.remove(ChronoField.DAY_OF_WEEK);\n            return date;\n        } else if (this._rangeUnit === ChronoUnit.YEARS) {  // week-of-year\n            const value = fieldValues.remove(this);\n            let date = LocalDate.of(year, 1, 1); // TODO: chrono.date(year, 1, 1);\n            let days;\n            if (resolverStyle === ResolverStyle.LENIENT) {\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const weeks = value - this._localizedWeekOfYear(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            } else {\n                const dateDow = this._localizedDayOfWeek(date, sow);\n                const woy = this._range.checkValidIntValue(value, this);\n                const weeks = woy - this._localizedWeekOfYear(date, dateDow);\n                days = weeks * 7 + (dow - dateDow);\n            }\n            date = date.plus(days, ChronoUnit.DAYS);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                if (date.getLong(ChronoField.YEAR) !== fieldValues.get(ChronoField.YEAR)) {\n                    throw new DateTimeException('Strict mode rejected date parsed to a different year');\n                }\n            }\n            fieldValues.remove(this);\n            fieldValues.remove(ChronoField.YEAR);\n            fieldValues.remove(ChronoField.DAY_OF_WEEK);\n            return date;\n        } else {\n            throw new IllegalStateException('unreachable');\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    name() {\n        return this._name;\n    }\n\n    baseUnit() {\n        return this._baseUnit;\n    }\n\n    rangeUnit() {\n        return this._rangeUnit;\n    }\n\n    range() {\n        return this._range;\n    }\n\n    //-----------------------------------------------------------------------\n    isDateBased() {\n        return true;\n    }\n\n    isTimeBased() {\n        return false;\n    }\n\n    isSupportedBy(temporal) {\n        if (temporal.isSupported(ChronoField.DAY_OF_WEEK)) {\n            if (this._rangeUnit === ChronoUnit.WEEKS) {\n                return true;\n            } else if (this._rangeUnit === ChronoUnit.MONTHS) {\n                return temporal.isSupported(ChronoField.DAY_OF_MONTH);\n            } else if (this._rangeUnit === ChronoUnit.YEARS) {\n                return temporal.isSupported(ChronoField.DAY_OF_YEAR);\n            } else if (this._rangeUnit === IsoFields.WEEK_BASED_YEARS) {\n                return temporal.isSupported(ChronoField.EPOCH_DAY);\n            } else if (this._rangeUnit === ChronoUnit.FOREVER) {\n                return temporal.isSupported(ChronoField.EPOCH_DAY);\n            }\n        }\n        return false;\n    }\n\n    rangeRefinedBy(temporal) {\n        if (this._rangeUnit === ChronoUnit.WEEKS) {\n            return this._range;\n        }\n\n        let field = null;\n        if (this._rangeUnit === ChronoUnit.MONTHS) {\n            field = ChronoField.DAY_OF_MONTH;\n        } else if (this._rangeUnit === ChronoUnit.YEARS) {\n            field = ChronoField.DAY_OF_YEAR;\n        } else if (this._rangeUnit === IsoFields.WEEK_BASED_YEARS) {\n            return this._rangeWOWBY(temporal);\n        } else if (this._rangeUnit === ChronoUnit.FOREVER) {\n            return temporal.range(ChronoField.YEAR);\n        } else {\n            throw new IllegalStateException('unreachable');\n        }\n\n        // Offset the ISO DOW by the start of this week\n        const sow = this._weekDef.firstDayOfWeek().value();\n        const isoDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n\n        const offset = this._startOfWeekOffset(temporal.get(field), dow);\n        const fieldRange = temporal.range(field);\n        return ValueRange.of(ComputedDayOfField._computeWeek(offset, fieldRange.minimum()),\n            ComputedDayOfField._computeWeek(offset, fieldRange.maximum()));\n    }\n\n    _rangeWOWBY(temporal) {\n        const sow = this._weekDef.firstDayOfWeek().value();\n        const isoDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        const dow = MathUtil.floorMod(isoDow - sow, 7) + 1;\n        const woy = this._localizedWeekOfYear(temporal, dow);\n        if (woy === 0) {\n            // TODO: we use IsoChronology for now\n            return this._rangeWOWBY(IsoChronology.INSTANCE.date(temporal).minus(2, ChronoUnit.WEEKS));\n            // return this._rangeWOWBY(Chronology.from(temporal).date(temporal).minus(2, ChronoUnit.WEEKS));\n        }\n        const offset = this._startOfWeekOffset(temporal.get(ChronoField.DAY_OF_YEAR), dow);\n        const year = temporal.get(ChronoField.YEAR);\n        const yearLen = Year.isLeap(year) ? 366 : 365;\n        const weekIndexOfFirstWeekNextYear = ComputedDayOfField._computeWeek(offset, yearLen + this._weekDef.minimalDaysInFirstWeek());\n        if (woy >= weekIndexOfFirstWeekNextYear) {\n            // TODO: we use IsoChronology for now\n            return this._rangeWOWBY(IsoChronology.INSTANCE.date(temporal).plus(2, ChronoUnit.WEEKS));\n            // return this._rangeWOWBY(Chronology.from(temporal).date(temporal).plus(2, ChronoUnit.WEEKS));\n        }\n        return ValueRange.of(1, weekIndexOfFirstWeekNextYear - 1);\n    }\n\n    getDisplayName(locale) {\n        requireNonNull(locale, 'locale');\n        if (this._rangeUnit === ChronoUnit.YEARS) {  // week-of-year\n            return 'Week';\n        }\n        return this.toString();\n    }\n\n    //-----------------------------------------------------------------------\n    toString() {\n        return this._name + '[' + this._weekDef.toString() + ']';\n    }\n}\n\n/**\n * The cache of rules by firstDayOfWeek plus minimalDays.\n * Initialized first to be available for definition of ISO, etc.\n */\nconst WeekFieldsCache = new Map();\n\n\n/**\n * Localized definitions of the day-of-week, week-of-month and week-of-year fields.\n * <p>\n * A standard week is seven days long, but cultures have different definitions for some\n * other aspects of a week. This class represents the definition of the week, for the\n * purpose of providing {@link TemporalField} instances.\n * <p>\n * WeekFields provides three fields,\n * {@link #dayOfWeek()}, {@link #weekOfMonth()}, and {@link #weekOfYear()}\n * that provide access to the values from any {@link Temporal temporal object}.\n * <p>\n * The computations for day-of-week, week-of-month, and week-of-year are based\n * on the  {@link ChronoField#YEAR proleptic-year},\n * {@link ChronoField#MONTH_OF_YEAR month-of-year},\n * {@link ChronoField#DAY_OF_MONTH day-of-month}, and\n * {@link ChronoField#DAY_OF_WEEK ISO day-of-week} which are based on the\n * {@link ChronoField#EPOCH_DAY epoch-day} and the chronology.\n * The values may not be aligned with the {@link ChronoField#YEAR_OF_ERA year-of-Era}\n * depending on the Chronology.\n * <p>A week is defined by:\n * <ul>\n * <li>The first day-of-week.\n * For example, the ISO-8601 standard considers Monday to be the first day-of-week.\n * <li>The minimal number of days in the first week.\n * For example, the ISO-8601 standard counts the first week as needing at least 4 days.\n * </ul><p>\n * Together these two values allow a year or month to be divided into weeks.\n * <p>\n * <h3>Week of Month</h3>\n * One field is used: week-of-month.\n * The calculation ensures that weeks never overlap a month boundary.\n * The month is divided into periods where each period starts on the defined first day-of-week.\n * The earliest period is referred to as week 0 if it has less than the minimal number of days\n * and week 1 if it has at least the minimal number of days.\n * <p>\n * <table cellpadding=\"0\" cellspacing=\"3\" border=\"0\" style=\"text-align: left; width: 50%;\">\n * <caption>Examples of WeekFields</caption>\n * <tr><th>Date</th><td>Day-of-week</td>\n *  <td>First day: Monday<br>Minimal days: 4</td><td>First day: Monday<br>Minimal days: 5</td></tr>\n * <tr><th>2008-12-31</th><td>Wednesday</td>\n *  <td>Week 5 of December 2008</td><td>Week 5 of December 2008</td></tr>\n * <tr><th>2009-01-01</th><td>Thursday</td>\n *  <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>\n * <tr><th>2009-01-04</th><td>Sunday</td>\n *  <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>\n * <tr><th>2009-01-05</th><td>Monday</td>\n *  <td>Week 2 of January 2009</td><td>Week 1 of January 2009</td></tr>\n * </table>\n * <p>\n * <h3>Week of Year</h3>\n * One field is used: week-of-year.\n * The calculation ensures that weeks never overlap a year boundary.\n * The year is divided into periods where each period starts on the defined first day-of-week.\n * The earliest period is referred to as week 0 if it has less than the minimal number of days\n * and week 1 if it has at least the minimal number of days.\n * <p>\n * This class is immutable and thread-safe.\n */\nexport class WeekFields {\n    // implementation notes\n    // querying week-of-month or week-of-year should return the week value bound within the month/year\n    // however, setting the week value should be lenient (use plus/minus weeks)\n    // allow week-of-month outer range [0 to 5]\n    // allow week-of-year outer range [0 to 53]\n    // this is because callers shouldn't be expected to know the details of validity\n\n    /**\n     * function overloading for {@link WeekFields#of}\n     *\n     * if called with 1 arguments then {@link WeekFields.ofLocale} is executed.\n     *\n     * Otherwise {@link WeekFields.ofFirstDayOfWeekMinDays} is executed.\n     *\n     * @param {!DayOfWeek | Locale} firstDayOrLocale\n     * @param {Number} minDays\n     * @returns {WeekFields} this for chaining\n     */\n    static of(firstDayOrLocale, minDays) {\n        if (minDays === undefined) {\n            return WeekFields.ofLocale(firstDayOrLocale);\n        } else {\n            return WeekFields.ofFirstDayOfWeekMinDays(firstDayOrLocale, minDays);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@code WeekFields} appropriate for a locale.\n     * <p>\n     * This will look up appropriate values from the provider of localization data.\n     *\n     * @param {!Locale} locale  the locale to use, not null\n     * @return the week-definition, not null\n     */\n    static ofLocale(locale) {\n        requireNonNull(locale, 'locale');\n\n        Cldr.load(cldrData('supplemental/weekData.json'));\n        const country = locale.country() ? locale.country() : '001'; // 001 is world region\n        const cldr = new Cldr(locale.localeString());\n        const weekData = cldr.get('supplemental/weekData');\n        const dow = _weekDayMap[weekData.firstDay[country]];\n        const minDays = weekData.minDays[country];\n        return WeekFields.ofFirstDayOfWeekMinDays(dow, minDays);\n    }\n\n    /**\n     * Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days.\n     * <p>\n     * The first day-of-week defines the ISO {@code DayOfWeek} that is day 1 of the week.\n     * The minimal number of days in the first week defines how many days must be present\n     * in a month or year, starting from the first day-of-week, before the week is counted\n     * as the first week. A value of 1 will count the first day of the month or year as part\n     * of the first week, whereas a value of 7 will require the whole seven days to be in\n     * the new month or year.\n     * <p>\n     * WeekFields instances are singletons; for each unique combination\n     * of {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} the\n     * the same instance will be returned.\n     *\n     * @param {!DayOfWeek} firstDayOfWeek  the first day of the week, not null\n     * @param {!Number} minimalDaysInFirstWeek  the minimal number of days in the first week, from\n     *     1 to 7\n     * @return {WeekFields} the week-definition, not null\n     * @throws IllegalArgumentException if the minimal days value is less than one\n     *      or greater than 7\n     */\n    static ofFirstDayOfWeekMinDays(firstDayOfWeek, minimalDaysInFirstWeek) {\n        requireNonNull(firstDayOfWeek, 'firstDayOfWeek');\n        requireInstance(firstDayOfWeek, DayOfWeek, 'firstDayOfWeek');\n        requireNonNull(minimalDaysInFirstWeek, 'minimalDaysInFirstWeek');\n        const key = firstDayOfWeek.toString() + minimalDaysInFirstWeek;\n        let rules = WeekFieldsCache.get(key);\n        if (rules == null) {\n            rules = new WeekFields(firstDayOfWeek, minimalDaysInFirstWeek);\n            WeekFieldsCache.set(key, rules);\n            rules = WeekFieldsCache.get(key);\n        }\n        return rules;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates an instance of the definition.\n     *\n     * @param {!DayOfWeek} firstDayOfWeek  the first day of the week, not null\n     * @param {!Number} minimalDaysInFirstWeek  the minimal number of days in the first week, from\n     *     1 to 7\n     * @throws IllegalArgumentException if the minimal days value is invalid\n     *\n     * @private\n     */\n    constructor(firstDayOfWeek, minimalDaysInFirstWeek) {\n        requireNonNull(firstDayOfWeek, 'firstDayOfWeek');\n        requireInstance(firstDayOfWeek, DayOfWeek, 'firstDayOfWeek');\n        requireNonNull(minimalDaysInFirstWeek, 'minimalDaysInFirstWeek');\n        if (minimalDaysInFirstWeek < 1 || minimalDaysInFirstWeek > 7) {\n            throw new IllegalArgumentException('Minimal number of days is invalid');\n        }\n        this._firstDayOfWeek = firstDayOfWeek;\n        this._minimalDays = minimalDaysInFirstWeek;\n        this._dayOfWeek = ComputedDayOfField.ofDayOfWeekField(this);\n        this._weekOfMonth = ComputedDayOfField.ofWeekOfMonthField(this);\n        this._weekOfYear = ComputedDayOfField.ofWeekOfYearField(this);\n        this._weekOfWeekBasedYear = ComputedDayOfField.ofWeekOfWeekBasedYearField(this);\n        this._weekBasedYear = ComputedDayOfField.ofWeekBasedYearField(this);\n        Cldr.load(cldrData('supplemental/likelySubtags.json'));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the first day-of-week.\n     * <p>\n     * The first day-of-week varies by culture.\n     * For example, the US uses Sunday, while France and the ISO-8601 standard use Monday.\n     * This method returns the first day using the standard {@code DayOfWeek} enum.\n     *\n     * @return {DayOfWeek} the first day-of-week, not null\n     */\n    firstDayOfWeek() {\n        return this._firstDayOfWeek;\n    }\n\n    /**\n     * Gets the minimal number of days in the first week.\n     * <p>\n     * The number of days considered to define the first week of a month or year\n     * varies by culture.\n     * For example, the ISO-8601 requires 4 days (more than half a week) to\n     * be present before counting the first week.\n     *\n     * @return {Number} the minimal number of days in the first week of a month or year, from 1 to 7\n     */\n    minimalDaysInFirstWeek() {\n        return this._minimalDays;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a field to access the day of week based on this {@code WeekFields}.\n     * <p>\n     * This is similar to {@link ChronoField#DAY_OF_WEEK} but uses values for\n     * the day-of-week based on this {@code WeekFields}.\n     * The days are numbered from 1 to 7 where the\n     * {@link #getFirstDayOfWeek() first day-of-week} is assigned the value 1.\n     * <p>\n     * For example, if the first day-of-week is Sunday, then that will have the\n     * value 1, with other days ranging from Monday as 2 to Saturday as 7.\n     * <p>\n     * In the resolving phase of parsing, a localized day-of-week will be converted\n     * to a standardized {@code ChronoField} day-of-week.\n     * The day-of-week must be in the valid range 1 to 7.\n     * Other fields in this class build dates using the standardized day-of-week.\n     *\n     * @return {TemporalField} a field providing access to the day-of-week with localized\n     *     numbering, not null\n     */\n    dayOfWeek() {\n        return this._dayOfWeek;\n    }\n\n    /**\n     * Returns a field to access the week of month based on this {@code WeekFields}.\n     * <p>\n     * This represents the concept of the count of weeks within the month where weeks\n     * start on a fixed day-of-week, such as Monday.\n     * This field is typically used with {@link WeekFields#dayOfWeek()}.\n     * <p>\n     * Week one (1) is the week starting on the {@link WeekFields#firstDayOfWeek}\n     * where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the month.\n     * Thus, week one may start up to {@code minDays} days before the start of the month.\n     * If the first week starts after the start of the month then the period before is week zero\n     * (0).\n     * <p>\n     * For example:<br>\n     * - if the 1st day of the month is a Monday, week one starts on the 1st and there is no week\n     * zero<br>\n     * - if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week\n     * zero<br>\n     * - if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is\n     * in week zero<br>\n     * - if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is\n     * in week one<br>\n     * <p>\n     * This field can be used with any calendar system.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a year,\n     * week-of-month, month-of-year and day-of-week.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all four fields are\n     * validated against their range of valid values. The week-of-month field\n     * is validated to ensure that the resulting month is the month requested.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all four fields are\n     * validated against their range of valid values. The week-of-month field\n     * is validated from 0 to 6, meaning that the resulting date can be in a\n     * different month to that specified.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n     * are validated against the range of valid values. The resulting date is calculated\n     * equivalent to the following four stage approach.\n     * First, create a date on the first day of the first week of January in the requested year.\n     * Then take the month-of-year, subtract one, and add the amount in months to the date.\n     * Then take the week-of-month, subtract one, and add the amount in weeks to the date.\n     * Finally, adjust to the correct day-of-week within the localized week.\n     *\n     * @return {TemporalField} a field providing access to the week-of-month, not null\n     */\n    weekOfMonth() {\n        return this._weekOfMonth;\n    }\n\n    /**\n     * Returns a field to access the week of year based on this {@code WeekFields}.\n     * <p>\n     * This represents the concept of the count of weeks within the year where weeks\n     * start on a fixed day-of-week, such as Monday.\n     * This field is typically used with {@link WeekFields#dayOfWeek()}.\n     * <p>\n     * Week one(1) is the week starting on the {@link WeekFields#firstDayOfWeek}\n     * where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n     * Thus, week one may start up to {@code minDays} days before the start of the year.\n     * If the first week starts after the start of the year then the period before is week zero\n     * (0).\n     * <p>\n     * For example:<br>\n     * - if the 1st day of the year is a Monday, week one starts on the 1st and there is no week\n     * zero<br>\n     * - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week\n     * zero<br>\n     * - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is\n     * in week zero<br>\n     * - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is\n     * in week one<br>\n     * <p>\n     * This field can be used with any calendar system.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a year,\n     * week-of-year and day-of-week.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n     * validated against their range of valid values. The week-of-year field\n     * is validated to ensure that the resulting year is the year requested.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n     * validated against their range of valid values. The week-of-year field\n     * is validated from 0 to 54, meaning that the resulting date can be in a\n     * different year to that specified.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n     * are validated against the range of valid values. The resulting date is calculated\n     * equivalent to the following three stage approach.\n     * First, create a date on the first day of the first week in the requested year.\n     * Then take the week-of-year, subtract one, and add the amount in weeks to the date.\n     * Finally, adjust to the correct day-of-week within the localized week.\n     *\n     * @return {TemporalField} a field providing access to the week-of-year, not null\n     */\n    weekOfYear() {\n        return this._weekOfYear;\n    }\n\n    /**\n     * Returns a field to access the week of a week-based-year based on this {@code WeekFields}.\n     * <p>\n     * This represents the concept of the count of weeks within the year where weeks\n     * start on a fixed day-of-week, such as Monday and each week belongs to exactly one year.\n     * This field is typically used with {@link WeekFields#dayOfWeek()} and\n     * {@link WeekFields#weekBasedYear()}.\n     * <p>\n     * Week one(1) is the week starting on the {@link WeekFields#firstDayOfWeek}\n     * where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n     * If the first week starts after the start of the year then the period before\n     * is in the last week of the previous year.\n     * <p>\n     * For example:<br>\n     * - if the 1st day of the year is a Monday, week one starts on the 1st<br>\n     * - if the 2nd day of the year is a Monday, week one starts on the 2nd and\n     *   the 1st is in the last week of the previous year<br>\n     * - if the 4th day of the year is a Monday, week one starts on the 4th and\n     *   the 1st to 3rd is in the last week of the previous year<br>\n     * - if the 5th day of the year is a Monday, week two starts on the 5th and\n     *   the 1st to 4th is in week one<br>\n     * <p>\n     * This field can be used with any calendar system.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a week-based-year,\n     * week-of-year and day-of-week.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n     * validated against their range of valid values. The week-of-year field\n     * is validated to ensure that the resulting week-based-year is the\n     * week-based-year requested.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n     * validated against their range of valid values. The week-of-week-based-year field\n     * is validated from 1 to 53, meaning that the resulting date can be in the\n     * following week-based-year to that specified.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n     * are validated against the range of valid values. The resulting date is calculated\n     * equivalent to the following three stage approach.\n     * First, create a date on the first day of the first week in the requested week-based-year.\n     * Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.\n     * Finally, adjust to the correct day-of-week within the localized week.\n     *\n     * @return {TemporalField} a field providing access to the week-of-week-based-year, not null\n     */\n    weekOfWeekBasedYear() {\n        return this._weekOfWeekBasedYear;\n    }\n\n    /**\n     * Returns a field to access the year of a week-based-year based on this {@code WeekFields}.\n     * <p>\n     * This represents the concept of the year where weeks start on a fixed day-of-week,\n     * such as Monday and each week belongs to exactly one year.\n     * This field is typically used with {@link WeekFields#dayOfWeek()} and\n     * {@link WeekFields#weekOfWeekBasedYear()}.\n     * <p>\n     * Week one(1) is the week starting on the {@link WeekFields#firstDayOfWeek}\n     * where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.\n     * Thus, week one may start before the start of the year.\n     * If the first week starts after the start of the year then the period before\n     * is in the last week of the previous year.\n     * <p>\n     * This field can be used with any calendar system.\n     * <p>\n     * In the resolving phase of parsing, a date can be created from a week-based-year,\n     * week-of-year and day-of-week.\n     * <p>\n     * In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are\n     * validated against their range of valid values. The week-of-year field\n     * is validated to ensure that the resulting week-based-year is the\n     * week-based-year requested.\n     * <p>\n     * In {@linkplain ResolverStyle#SMART smart mode}, all three fields are\n     * validated against their range of valid values. The week-of-week-based-year field\n     * is validated from 1 to 53, meaning that the resulting date can be in the\n     * following week-based-year to that specified.\n     * <p>\n     * In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week\n     * are validated against the range of valid values. The resulting date is calculated\n     * equivalent to the following three stage approach.\n     * First, create a date on the first day of the first week in the requested week-based-year.\n     * Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.\n     * Finally, adjust to the correct day-of-week within the localized week.\n     *\n     * @return {TemporalField} a field providing access to the week-based-year, not null\n     */\n    weekBasedYear() {\n        return this._weekBasedYear;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this {@code WeekFields} is equal to the specified object.\n     * <p>\n     * The comparison is based on the entire state of the rules, which is\n     * the first day-of-week and minimal days.\n     *\n     * @param {*} object  the other rules to compare to, null returns false\n     * @return true if this is equal to the specified rules\n     */\n    equals(object) {\n        if (this === object) {\n            return true;\n        }\n        if (object instanceof WeekFields) {\n            return this.hashCode() === object.hashCode();\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this {@code WeekFields}.\n     *\n     * @return a suitable hash code\n     */\n    hashCode() {\n        return this._firstDayOfWeek.ordinal() * 7 + this._minimalDays;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A string representation of this {@code WeekFields} instance.\n     *\n     * @return the string representation, not null\n     */\n    toString() {\n        return 'WeekFields[' + this._firstDayOfWeek + ',' + this._minimalDays + ']';\n    }\n\n}\n\nexport function _init() {\n    /**\n     * The ISO-8601 definition, where a week starts on Monday and the first week\n     * has a minimum of 4 days.\n     * <p>\n     * The ISO-8601 standard defines a calendar system based on weeks.\n     * It uses the week-based-year and week-of-week-based-year concepts to split\n     * up the passage of days instead of the standard year/month/day.\n     * <p>\n     * Note that the first week may start in the previous calendar year.\n     * Note also that the first few days of a calendar year may be in the\n     * week-based-year corresponding to the previous calendar year.\n     */\n    WeekFields.ISO = WeekFields.of(DayOfWeek.MONDAY, 4);\n\n    /**\n     * The common definition of a week that starts on Sunday.\n     * <p>\n     * Defined as starting on Sunday and with a minimum of 1 day in the month.\n     * This week definition is in use in the US and other European countries.\n     *\n     */\n    WeekFields.SUNDAY_START = WeekFields.of(DayOfWeek.SUNDAY, 1);\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/temporal/WeekFields.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\nimport localeDefault from './plug';\n\nexport default localeDefault;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js-joda-locale.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\n/* eslint-disable no-param-reassign */\n\nimport CldrDateTimeFormatterBuilder from './format/cldr/CldrDateTimeFormatterBuilder';\nimport LocaleDateTimeFormatter from './format/LocaleDateTimeFormatter';\nimport Locale from './Locale';\n\nimport './_init';\n\n/**\n * plugin Function, call using js-jodas use()\n *\n * @param jsJoda\n */\nexport default function (jsJoda) {\n    // inject all prototype properties (except constructor) from CldrDateTimeFormatterBuilder into DateTimeFormatterBuilder\n    Object.getOwnPropertyNames(CldrDateTimeFormatterBuilder.prototype).forEach((prop) => {\n        if (prop !== 'constructor') {\n            jsJoda.DateTimeFormatterBuilder.prototype[prop] = CldrDateTimeFormatterBuilder.prototype[prop];\n        }\n    });\n    // inject all prototype properties (except constructor) from LocaleDateTimeFormatter into DateTimeFormatter\n    Object.getOwnPropertyNames(LocaleDateTimeFormatter.prototype).forEach((prop) => {\n        if (prop !== 'constructor') {\n            jsJoda.DateTimeFormatter.prototype[prop] = LocaleDateTimeFormatter.prototype[prop];\n        }\n    });\n    // inject Locale into jsJoda\n    jsJoda.Locale = Locale;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plug.js","/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport {\n    _ as jodaInternal,\n    DateTimeFormatterBuilder,\n    IllegalArgumentException,\n    TextStyle,\n    ChronoField,\n    TemporalField\n} from 'js-joda';\n\nimport TextPrinterParser from '../parser/TextPrinterParser';\nimport CldrDateTimeTextProvider from './CldrDateTimeTextProvider';\nimport CldrZoneTextPrinterParser from './CldrZoneTextPrinterParser';\nimport {LocaleStore} from '../LocaleStore';\nimport LocalizedOffsetPrinterParser from '../parser/LocalizedOffsetPrinterParser';\nimport WeekFieldsPrinterParser from '../parser/WeekFieldsPrinterParser';\n\nconst { assert: { requireNonNull, requireInstance } } = jodaInternal;\n\n/** DateTimeFormatterBuilder extension functions implementing locale handling using cldr data (http://cldr.unicode.org/)\n */\nexport default class CldrDateTimeFormatterBuilder extends DateTimeFormatterBuilder {\n\n    //-------------------------------------------------------------------------\n    /**\n     * function overloading for {@link CldrDateTimeFormatterBuilder#appendText}\n     *\n     * if called with 1 arguments and first argument is an instance of ChronoField,\n     * then {@link CldrDateTimeFormatterBuilder.appendTextField} is executed.\n     * if called with 2 arguments and second argument is an instance of TextStyle,\n     * then {@link CldrDateTimeFormatterBuilder.appendTextFieldStyle} is executed.\n     *\n     * Otherwise {@link CldrDateTimeFormatterBuilder.appendTextFieldMap} is executed.\n     *\n     * @param {!ChronoField} field\n     * @param {!(TextStyle|Object)} styleOrMap\n     * @returns {DateTimeFormatterBuilder} this for chaining\n     */\n    appendText(field, styleOrMap) {\n        if (styleOrMap === undefined) {\n            return this.appendTextField(field);\n        } else if (styleOrMap instanceof TextStyle) {\n            return this.appendTextFieldStyle(field, styleOrMap);\n        } else {\n            return this.appendTextFieldMap(field, styleOrMap);\n        }\n    }\n\n    /**\n     * Appends the text of a date-time field to the formatter using the full\n     * text style.\n     * <p>\n     * The text of the field will be output during a print.\n     * The value must be within the valid range of the field.\n     * If the value cannot be obtained then an exception will be thrown.\n     * If the field has no textual representation, then the numeric value will be used.\n     * <p>\n     * The value will be printed as per the normal print of an integer value.\n     * Only negative numbers will be signed. No padding will be added.\n     *\n     * @param {!TemporalField} field  the field to append, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendTextField(field) {\n        return this.appendTextFieldStyle(field, TextStyle.FULL);\n    }\n\n    /**\n     * Appends the text of a date-time field to the formatter.\n     * <p>\n     * The text of the field will be output during a print.\n     * The value must be within the valid range of the field.\n     * If the value cannot be obtained then an exception will be thrown.\n     * If the field has no textual representation, then the numeric value will be used.\n     * <p>\n     * The value will be printed as per the normal print of an integer value.\n     * Only negative numbers will be signed. No padding will be added.\n     *\n     * @param {!TemporalField} field  the field to append, not null\n     * @param {!TextStyle} textStyle  the text style to use, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendTextFieldStyle(field, textStyle) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        requireNonNull(textStyle, 'textStyle');\n        requireInstance(textStyle, TextStyle, 'textStyle');\n        this._appendInternal(new TextPrinterParser(field, textStyle, new CldrDateTimeTextProvider()));\n        return this;\n    }\n\n    /**\n     * Appends the text of a date-time field to the formatter using the specified\n     * map to supply the text.\n     * <p>\n     * The standard text outputting methods use the localized text in the JDK.\n     * This method allows that text to be specified directly.\n     * The supplied map is not validated by the builder to ensure that printing or\n     * parsing is possible, thus an invalid map may throw an error during later use.\n     * <p>\n     * Supplying the map of text provides considerable flexibility in printing and parsing.\n     * For example, a legacy application might require or supply the months of the\n     * year as \"JNY\", \"FBY\", \"MCH\" etc. These do not match the standard set of text\n     * for localized month names. Using this method, a map can be created which\n     * defines the connection between each value and the text:\n     * <pre>\n     * Map&lt;Long, String&gt; map = new HashMap&lt;&gt;();\n     * map.put(1, \"JNY\");\n     * map.put(2, \"FBY\");\n     * map.put(3, \"MCH\");\n     * ...\n     * builder.appendText(MONTH_OF_YEAR, map);\n     * </pre>\n     * <p>\n     * Other uses might be to output the value with a suffix, such as \"1st\", \"2nd\", \"3rd\",\n     * or as Roman numerals \"I\", \"II\", \"III\", \"IV\".\n     * <p>\n     * During printing, the value is obtained and checked that it is in the valid range.\n     * If text is not available for the value then it is output as a number.\n     * During parsing, the parser will match against the map of text and numeric values.\n     *\n     * @param {!ChronoField} field  the field to append, not null\n     * @param {!Object} textLookup  the map from the value to the text\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendTextFieldMap(field, textLookup) {\n        requireNonNull(field, 'field');\n        requireInstance(field, ChronoField, 'field');\n        requireNonNull(textLookup, 'textLookup');\n        const copy = Object.assign({}, textLookup);\n        const map = {};\n        map[TextStyle.FULL] = copy;\n        const store = new LocaleStore(map);\n        const provider = {\n            getText: function(field, value, style) {\n                return store.getText(value, style);\n            },\n            getTextIterator: function(field, style) {\n                return store.getTextIterator(style);\n            }\n        };\n        this._appendInternal(new TextPrinterParser(field, TextStyle.FULL, provider));\n        return this;\n    }\n\n    appendWeekField(field, count) {\n        requireNonNull(field, 'field');\n        requireNonNull(count, 'count');\n        this._appendInternal(new WeekFieldsPrinterParser(field, count));\n        return this;\n    }\n\n    /**\n     * Appends the time-zone name, such as 'British Summer Time', to the formatter.\n     * <p>\n     * This appends an instruction to print the textual name of the zone to the builder.\n     * <p>\n     * During printing, the zone is obtained using a mechanism equivalent\n     * to querying the temporal with {@link TemporalQueries#zoneId()}.\n     * If the zone is a {@code ZoneOffset} it will be printed using the\n     * result of {@link ZoneOffset#getId()}.\n     * If the zone is not an offset, the textual name will be looked up\n     * for the locale set in the {@link DateTimeFormatter}.\n     * If the temporal object being printed represents an instant, then the text\n     * will be the summer or winter time text as appropriate.\n     * If the lookup for text does not find any suitable reuslt, then the\n     * {@link ZoneId#getId() ID} will be printed instead.\n     * If the zone cannot be obtained then an exception is thrown unless the\n     * section of the formatter is optional.\n     * <p>\n     * Parsing is not currently supported.\n     *\n     * @param {!TextStyle} textStyle  the text style to use, not null\n     * @return this, for chaining, not null\n     */\n    appendZoneText(textStyle) {\n        this._appendInternal(new CldrZoneTextPrinterParser(textStyle));\n        return this;\n    }\n\n    /**\n     * Appends the localized zone offset, such as 'GMT+01:00', to the formatter.\n     * <p>\n     * This appends a localized zone offset to the builder, the format of the\n     * localized offset is controlled by the specified {@link FormatStyle style}\n     * to this method:\n     * <ul>\n     * <li>{@link TextStyle#FULL full} - formats with localized offset text, such\n     * as 'GMT, 2-digit hour and minute field, optional second field if non-zero,\n     * and colon.\n     * <li>{@link TextStyle#SHORT short} - formats with localized offset text,\n     * such as 'GMT, hour without leading zero, optional 2-digit minute and\n     * second if non-zero, and colon.\n     * </ul>\n     * <p>\n     * During formatting, the offset is obtained using a mechanism equivalent\n     * to querying the temporal with {@link TemporalQueries#offset()}.\n     * If the offset cannot be obtained then an exception is thrown unless the\n     * section of the formatter is optional.\n     * <p>\n     * During parsing, the offset is parsed using the format defined above.\n     * If the offset cannot be parsed then an exception is thrown unless the\n     * section of the formatter is optional.\n     * <p>\n     * @param {TextStyle} textStyle  the format style to use, not null\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if style is neither {@link TextStyle#FULL\n     * full} nor {@link TextStyle#SHORT short}\n     */\n    appendLocalizedOffset(textStyle) {\n        requireNonNull(textStyle, 'textStyle');\n        if (textStyle !== TextStyle.FULL && textStyle !== TextStyle.SHORT) {\n            throw new IllegalArgumentException('Style must be either full or short');\n        }\n        this._appendInternal(new LocalizedOffsetPrinterParser(textStyle));\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/cldr/CldrDateTimeFormatterBuilder.js","/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { DateTimeFormatterBuilder, IllegalArgumentException, SignStyle, TextStyle } from 'js-joda';\n\n//-----------------------------------------------------------------------\n/**\n * Prints or parses field text.\n * @private\n */\nexport default class TextPrinterParser {\n    /**\n     * Constructor.\n     *\n     * @param {!TemporalField} field  the field to output, not null\n     * @param {!TextStyle} textStyle  the text style, not null\n     * @param {!DateTimeProvider} provider  the text provider, not null\n     */\n    constructor(field, textStyle, provider) {\n        // validated by caller\n        this._field = field;\n        this._textStyle = textStyle;\n        this._provider = provider;\n    }\n\n    field() {\n        return this._field;\n    }\n\n    textStyle() {\n        return this.textStyle;\n    }\n\n    provider() {\n        return this.provider;\n    }\n\n    print(context, buf) {\n        const value = context.getValue(this._field);\n        if (value === null) {\n            return false;\n        }\n        const text = this._provider.getText(this._field, value, this._textStyle, context.locale());\n        if (text === null) {\n            return this._numberPrinterParser().print(context, buf);\n        }\n        buf.append(text);\n        return true;\n    }\n\n    parse(context, parseText, position) {\n        const length = parseText.length;\n        if (position < 0 || position > length) {\n            throw new IllegalArgumentException(`The position is invalid: ${position}`);\n        }\n        const style = (context.isStrict() ? this._textStyle : null);\n        const it = this._provider.getTextIterator(this._field, style, context.locale());\n        if (it != null) {\n            for (const entry of it) {\n                const itText = entry.key;\n                if (context.subSequenceEquals(itText, 0, parseText, position, itText.length)) {\n                    return context.setParsedField(this._field, entry.value, position, position + itText.length);\n                }\n            }\n            if (context.isStrict()) {\n                return ~position;\n            }\n        }\n        return this._numberPrinterParser().parse(context, parseText, position);\n    }\n\n    /**\n     * Create and cache a number printer parser.\n     * @return the number printer parser for this field, not null\n     */\n    _numberPrinterParser() {\n        if (this._currentNumberPrinterParser == null) {\n            this._currentNumberPrinterParser = new DateTimeFormatterBuilder.NumberPrinterParser(this._field, 1, 19, SignStyle.NORMAL);\n        }\n        return this._currentNumberPrinterParser;\n    }\n\n    toString() {\n        if (this._textStyle === TextStyle.FULL) {\n            return `Text(${this._field})`;\n        }\n        return `Text(${this._field},${this._textStyle})`;\n    }\n}\n\n//-----------------------------------------------------------------------\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/parser/TextPrinterParser.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { ChronoField, IsoFields, TextStyle } from 'js-joda';\n\nimport cldrData from 'cldr-data';\nimport Cldr from 'cldrjs';\n\nimport {LocaleStore, createEntry} from '../LocaleStore';\n\n/**\n * The Service Provider Implementation to obtain date-time text for a field.\n * <p>\n * This implementation is based on data from cldr.\n *\n * @private\n */\nexport default class CldrDateTimeTextProvider {\n\n    constructor() {\n        this._cache = {};\n        Cldr.load(cldrData('supplemental/likelySubtags.json'));\n    }\n\n    //-----------------------------------------------------------------------\n    getAvailableLocales() {\n        return cldrData('availableLocales.json').availableLocales;\n    }\n\n    //-----------------------------------------------------------------------\n    getText(field, value, style, locale) {\n        const store = this._findStore(field, locale);\n        if (store instanceof LocaleStore) {\n            return store.getText(value, style);\n        }\n        return null;\n    }\n\n    getTextIterator(field, style, locale) {\n        const store = this._findStore(field, locale);\n        if (store instanceof LocaleStore) {\n            return store.getTextIterator(style);\n        }\n        return null;\n    }\n\n    //-----------------------------------------------------------------------\n    _findStore(field, locale) {\n        const key = createEntry(field, locale);\n        let store = this._cache[key];\n        if (store === undefined) {\n            store = this._createStore(field, locale);\n            this._cache[key] = store;\n        }\n        return store;\n    }\n\n    _createStore(field, locale) {\n        Cldr.load(cldrData(`main/${locale.localeString()}/ca-gregorian.json`));\n        const cldr = new Cldr(locale.localeString());\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            const monthsData = cldr.main('dates/calendars/gregorian/months/format');\n            const styleMap = {};\n            let data = {};\n            data[1] = monthsData.wide[1];\n            data[2] = monthsData.wide[2];\n            data[3] = monthsData.wide[3];\n            data[4] = monthsData.wide[4];\n            data[5] = monthsData.wide[5];\n            data[6] = monthsData.wide[6];\n            data[7] = monthsData.wide[7];\n            data[8] = monthsData.wide[8];\n            data[9] = monthsData.wide[9];\n            data[10] = monthsData.wide[10];\n            data[11] = monthsData.wide[11];\n            data[12] = monthsData.wide[12];\n            styleMap[TextStyle.FULL] = data;\n\n            data = {};\n            data[1] = monthsData.narrow[1];\n            data[2] = monthsData.narrow[2];\n            data[3] = monthsData.narrow[3];\n            data[4] = monthsData.narrow[4];\n            data[5] = monthsData.narrow[5];\n            data[6] = monthsData.narrow[6];\n            data[7] = monthsData.narrow[7];\n            data[8] = monthsData.narrow[8];\n            data[9] = monthsData.narrow[9];\n            data[10] = monthsData.narrow[10];\n            data[11] = monthsData.narrow[11];\n            data[12] = monthsData.narrow[12];\n            styleMap[TextStyle.NARROW] = data;\n\n            data = {};\n            data[1] = monthsData.abbreviated[1];\n            data[2] = monthsData.abbreviated[2];\n            data[3] = monthsData.abbreviated[3];\n            data[4] = monthsData.abbreviated[4];\n            data[5] = monthsData.abbreviated[5];\n            data[6] = monthsData.abbreviated[6];\n            data[7] = monthsData.abbreviated[7];\n            data[8] = monthsData.abbreviated[8];\n            data[9] = monthsData.abbreviated[9];\n            data[10] = monthsData.abbreviated[10];\n            data[11] = monthsData.abbreviated[11];\n            data[12] = monthsData.abbreviated[12];\n            styleMap[TextStyle.SHORT] = data;\n            return this._createLocaleStore(styleMap);\n        }\n        if (field === ChronoField.DAY_OF_WEEK) {\n            const daysData = cldr.main('dates/calendars/gregorian/days/format');\n            const styleMap = {};\n            let data = {};\n            data[1] = daysData.wide.mon;\n            data[2] = daysData.wide.tue;\n            data[3] = daysData.wide.wed;\n            data[4] = daysData.wide.thu;\n            data[5] = daysData.wide.fri;\n            data[6] = daysData.wide.sat;\n            data[7] = daysData.wide.sun;\n            styleMap[TextStyle.FULL] = data;\n\n            data = {};\n            data[1] = daysData.narrow.mon;\n            data[2] = daysData.narrow.tue;\n            data[3] = daysData.narrow.wed;\n            data[4] = daysData.narrow.thu;\n            data[5] = daysData.narrow.fri;\n            data[6] = daysData.narrow.sat;\n            data[7] = daysData.narrow.sun;\n            styleMap[TextStyle.NARROW] = data;\n\n            data = {};\n            data[1] = daysData.abbreviated.mon;\n            data[2] = daysData.abbreviated.tue;\n            data[3] = daysData.abbreviated.wed;\n            data[4] = daysData.abbreviated.thu;\n            data[5] = daysData.abbreviated.fri;\n            data[6] = daysData.abbreviated.sat;\n            data[7] = daysData.abbreviated.sun;\n            styleMap[TextStyle.SHORT] = data;\n            return this._createLocaleStore(styleMap);\n        }\n        if (field === ChronoField.AMPM_OF_DAY) {\n            const dayPeriodsData = cldr.main('dates/calendars/gregorian/dayPeriods/format');\n            const styleMap = {};\n            let data = {};\n            data[0] = dayPeriodsData.wide.am;\n            data[1] = dayPeriodsData.wide.pm;\n            styleMap[TextStyle.FULL] = data;\n\n            data = {};\n            data[0] = dayPeriodsData.narrow.am;\n            data[1] = dayPeriodsData.narrow.pm;\n            styleMap[TextStyle.NARROW] = data;\n\n            data = {};\n            data[0] = dayPeriodsData.abbreviated.am;\n            data[1] = dayPeriodsData.abbreviated.pm;\n            styleMap[TextStyle.SHORT] = data;\n\n            return this._createLocaleStore(styleMap);\n        }\n        if (field === ChronoField.ERA) {\n            const erasData = cldr.main('dates/calendars/gregorian/eras');\n            const styleMap = {};\n            let data = {};\n            data[0] = erasData.eraNames['0'];\n            data[1] = erasData.eraNames['1'];\n            styleMap[TextStyle.FULL] = data;\n\n            data = {};\n            data[0] = erasData.eraNarrow['0'];\n            data[1] = erasData.eraNarrow['1'];\n            styleMap[TextStyle.NARROW] = data;\n\n            data = {};\n            data[0] = erasData.eraAbbr['0'];\n            data[1] = erasData.eraAbbr['1'];\n            styleMap[TextStyle.SHORT] = data;\n\n            return this._createLocaleStore(styleMap);\n        }\n        if (field === IsoFields.QUARTER_OF_YEAR) {\n            const quartersData = cldr.main('dates/calendars/gregorian/quarters/format');\n            const styleMap = {};\n            let data = {};\n            data[1] = quartersData.wide['1'];\n            data[2] = quartersData.wide['2'];\n            data[3] = quartersData.wide['3'];\n            data[4] = quartersData.wide['4'];\n            styleMap[TextStyle.FULL] = data;\n\n            data = {};\n            data[1] = quartersData.narrow['1'];\n            data[2] = quartersData.narrow['2'];\n            data[3] = quartersData.narrow['3'];\n            data[4] = quartersData.narrow['4'];\n            styleMap[TextStyle.NARROW] = data;\n\n            data = {};\n            data[1] = quartersData.abbreviated['1'];\n            data[2] = quartersData.abbreviated['2'];\n            data[3] = quartersData.abbreviated['3'];\n            data[4] = quartersData.abbreviated['4'];\n            styleMap[TextStyle.SHORT] = data;\n\n            return this._createLocaleStore(styleMap);\n        }\n        return null;  // null marker for map\n    }\n\n    //-----------------------------------------------------------------------\n    _createLocaleStore(valueTextMap) {\n        valueTextMap[TextStyle.FULL_STANDALONE] = valueTextMap[TextStyle.FULL];\n        valueTextMap[TextStyle.SHORT_STANDALONE] = valueTextMap[TextStyle.SHORT];\n        /* istanbul ignore if */ // this doesn't seem to happen?\n        if (Object.keys(valueTextMap).includes(TextStyle.NARROW) && !Object.keys(valueTextMap).includes(TextStyle.NARROW_STANDALONE)) {\n            valueTextMap[TextStyle.NARROW_STANDALONE] = valueTextMap[TextStyle.NARROW];\n        }\n        return new LocaleStore(valueTextMap);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/cldr/CldrDateTimeTextProvider.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport cldrData from 'cldr-data';\nimport Cldr from 'cldrjs';\n\nimport {\n    _ as jodaInternal,\n    TextStyle,\n    TemporalQueries,\n    ZoneId,\n    ZoneOffset,\n    ZoneRulesProvider,\n} from 'js-joda';\n\nconst { assert: { requireNonNull, requireInstance } } = jodaInternal;\n\n//-----------------------------------------------------------------------\nconst LENGTH_COMPARATOR = (str1, str2) => {\n    let cmp = str2.length - str1.length;\n    if (cmp === 0) {\n        cmp = str1.localeCompare(str2);\n    }\n    return cmp;\n};\n/**\n * Prints or parses a zone ID.\n */\nexport default class CldrZoneTextPrinterParser {\n    /** The text style to output. */\n\n    constructor(textStyle) {\n        requireNonNull(textStyle, 'textStyle');\n        requireInstance(textStyle, TextStyle, 'textStyle');\n        this._textStyle = textStyle;\n        Cldr.load(cldrData('supplemental/likelySubtags.json'));\n        Cldr.load(cldrData('supplemental/metaZones.json'));\n    }\n\n    _resolveZoneIdText(cldr, zoneId, style, type, mapZones) {\n        const zoneData = cldr.main(`dates/timeZoneNames/zone/${zoneId}/${style}/${type}`);\n        if (zoneData) {\n            return zoneData;\n        } else {\n            const metazoneInfo = cldr.get(`supplemental/metaZones/metazoneInfo/timezone/${zoneId}`);\n            if (metazoneInfo) {\n                // const zoneData = cldr.main(`dates/timeZoneNames/metazone/Acre`);\n                // TODO: determine metaZone for current temporal, for now, we use the last one :/\n                const metazone = metazoneInfo[metazoneInfo.length - 1]['usesMetazone']['_mzone'];\n                let metaZoneData = cldr.main(`dates/timeZoneNames/metazone/${metazone}/${style}/${type}`);\n                if (metaZoneData) {\n                    return metaZoneData;\n                } else {\n                    // type fallback, first generic, then standard\n                    metaZoneData = cldr.main(`dates/timeZoneNames/metazone/${metazone}/${style}/generic`);\n                    if (!metaZoneData) {\n                        metaZoneData = cldr.main(`dates/timeZoneNames/metazone/${metazone}/${style}/standard`);\n                    }\n                    if (metaZoneData) {\n                        return metaZoneData;\n                    } else {\n                        // find preferred Zone and resolve again\n                        const preferredZone = mapZones[metazone][cldr.attributes.territory];\n                        if (preferredZone) {\n                            if (preferredZone !== zoneId) {\n                                return this._resolveZoneIdText(cldr, preferredZone, style, type, mapZones);\n                            }\n                        } else {\n                            // find golden Zone and resolve again\n                            const goldenZone = mapZones[metazone]['001'];\n                            if (goldenZone !== zoneId) {\n                                return this._resolveZoneIdText(cldr, goldenZone, style, type, mapZones);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    print(context, buf) {\n\n        //see http://www.unicode.org/reports/tr35/tr35-dates.html#Time_Zone_Names\n\n        const zone = context.getValueQuery(TemporalQueries.zoneId());\n        /* istanbul ignore if */ // shouldn't happen... getValueQuery throws before returning null\n        if (zone == null) {\n            return false;\n        }\n        if (zone.normalized() instanceof ZoneOffset) {\n            buf.append(zone.id());\n            return true;\n        }\n        const daylight = false;\n        const hasDaylightSupport = false;\n        /* TODO: currently js-joda-timezone does not support ZoneRules.isDaylightSavings() ... uncomment if it does\n         const temporal = context.temporal();\n         if (temporal.isSupported(ChronoField.INSTANT_SECONDS)) {\n            hasDaylightSupport = true;\n            const instant = Instant.ofEpochSecond(temporal.getLong(ChronoField.INSTANT_SECONDS));\n            daylight = zone.rules().isDaylightSavings(instant);\n        }*/\n        const tzType = hasDaylightSupport ? (daylight ? 'daylight' : 'standard') : 'generic';\n        const tzstyle = (this._textStyle.asNormal() === TextStyle.FULL ? 'long' : 'short');\n        Cldr.load(cldrData(`main/${context.locale().localeString()}/timeZoneNames.json`));\n        const cldr = new Cldr(context.locale().localeString());\n        const mapZones = {};\n\n        cldr.get('supplemental/metaZones/metazones').forEach((metaZone) => {\n            if (metaZone.mapZone) {\n                if (!mapZones[metaZone.mapZone._other]) {\n                    mapZones[metaZone.mapZone._other] = {};\n                }\n                mapZones[metaZone.mapZone._other][metaZone.mapZone._territory] = metaZone.mapZone._type;\n            }\n        });\n\n        const text = this._resolveZoneIdText(cldr, zone.id(), tzstyle, tzType, mapZones);\n        if (text) {\n            buf.append(text);\n        } else {\n            // fallback, print zoneId\n            buf.append(zone.id());\n        }\n        return true;\n    }\n\n    parse(context, text, position) {\n        const ids = {};\n        Cldr.load(cldrData(`main/${context.locale().localeString()}/timeZoneNames.json`));\n        const cldr = new Cldr(context.locale().localeString());\n        const mapZones = {};\n\n        cldr.get('supplemental/metaZones/metazones').forEach((metaZone) => {\n            if (metaZone.mapZone) {\n                if (!mapZones[metaZone.mapZone._other]) {\n                    mapZones[metaZone.mapZone._other] = {};\n                }\n                mapZones[metaZone.mapZone._other][metaZone.mapZone._territory] = metaZone.mapZone._type;\n            }\n        });\n        for (const id of ZoneRulesProvider.getAvailableZoneIds()) {\n            ids[id] = id;\n            const tzstyle = (this._textStyle.asNormal() === TextStyle.FULL ? 'long' : 'short');\n\n            const genericText = this._resolveZoneIdText(cldr, id, tzstyle, 'generic', mapZones);\n            if (genericText) {\n                ids[genericText] = id;\n            }\n            const standardText = this._resolveZoneIdText(cldr, id, tzstyle, 'standard', mapZones);\n            if (standardText) {\n                ids[standardText] = id;\n            }\n            const daylightText = this._resolveZoneIdText(cldr, id, tzstyle, 'daylight', mapZones);\n            if (daylightText) {\n                ids[daylightText] = id;\n            }\n        }\n        // threeten is using a (sorted) TreeMap... so we need to sort the keys\n        const sortedKeys = Object.keys(ids).sort(LENGTH_COMPARATOR);\n        for (const name of sortedKeys) {\n            if (context.subSequenceEquals(text, position, name, 0, name.length)) {\n                context.setParsedZone(ZoneId.of(ids[name]));\n                return position + name.length;\n            }\n        }\n        return ~position;\n    }\n\n    toString() {\n        return `ZoneText(${this._textStyle})`;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/cldr/CldrZoneTextPrinterParser.js","/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport {\n    _ as jodaInternal,\n    DateTimeFormatterBuilder,\n    ChronoField,\n    TextStyle\n} from 'js-joda';\n\nconst { MathUtil } = jodaInternal;\n//-----------------------------------------------------------------------\n/**\n * Prints or parses field text.\n * @private\n */\nexport default class LocalizedOffsetPrinterParser {\n    /**\n     * Constructor.\n     *\n     * @param {!TextStyle} textStyle  the text style, not null\n     */\n    constructor(textStyle) {\n        this._textStyle = textStyle;\n    }\n\n    textStyle() {\n        return this._textStyle;\n    }\n\n    print(context, buf) {\n        const offsetSecs = context.getValue(ChronoField.OFFSET_SECONDS);\n        /* istanbul ignore if */ // shouldn't happen... getValue throws for unsupported fields?\n        if (offsetSecs == null) {\n            return false;\n        }\n        buf.append('GMT');\n        if (this._textStyle === TextStyle.FULL) {\n            return new DateTimeFormatterBuilder.OffsetIdPrinterParser('', '+HH:MM:ss').print(context, buf);\n        }\n        const totalSecs = MathUtil.safeToInt(offsetSecs);\n        if (totalSecs !== 0) {\n            const absHours = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 3600), 100));  // anything larger than 99 silently dropped\n            const absMinutes = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs,60), 60));\n            const absSeconds = Math.abs(MathUtil.intMod(totalSecs, 60));\n            buf.append(totalSecs < 0 ? '-' : '+').append(absHours);\n            if (absMinutes > 0 || absSeconds > 0) {\n                buf.append(':')\n                    .append(MathUtil.intDiv(absMinutes, 10)).append(MathUtil.intMod(absMinutes,10));\n                if (absSeconds > 0) {\n                    buf.append(':')\n                        .append(MathUtil.intDiv(absSeconds, 10)).append(MathUtil.intMod(absSeconds, 10));\n                }\n            }\n        }\n        return true;\n    }\n\n    parse(context, text, position) {\n        if (context.subSequenceEquals(text, position, 'GMT', 0, 3) === false) {\n            return ~position;\n        }\n        position += 3;\n        if (this._textStyle === TextStyle.FULL) {\n            return new DateTimeFormatterBuilder.OffsetIdPrinterParser('', '+HH:MM:ss').parse(context, text, position);\n        }\n        const end = text.length;\n        if (position === end) {\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n        }\n        const sign = text.charAt(position);\n        if (sign !== '+' && sign !== '-') {\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n        }\n        const negative = (sign === '-' ? -1 : 1);\n        /* istanbul ignore if */ // cannot happen, already checked before\n        if (position === end) {\n            return ~position;\n        }\n        position++;\n        // hour\n        let ch = text.charAt(position);\n        if (ch < '0' || ch > '9') {\n            return ~position;\n        }\n        position++;\n        let hour = MathUtil.parseInt(ch);\n        if (position !== end) {\n            ch = text.charAt(position);\n            if (ch >= '0' && ch <= '9') {\n                hour = hour * 10 + MathUtil.parseInt(ch);\n                if (hour > 23) {\n                    return ~position;\n                }\n                position++;\n            }\n        }\n        if (position === end || text.charAt(position) !== ':') {\n            const offset = negative * 3600 * hour;\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, offset, position, position);\n        }\n        position++;\n        // minute\n        if (position > end - 2) {\n            return ~position;\n        }\n        ch = text.charAt(position);\n        if (ch < '0' || ch > '9') {\n            return ~position;\n        }\n        position++;\n        let min = MathUtil.parseInt(ch);\n        ch = text.charAt(position);\n        if (ch < '0' || ch > '9') {\n            return ~position;\n        }\n        position++;\n        min = min * 10 + MathUtil.parseInt(ch);\n        if (min > 59) {\n            return ~position;\n        }\n        if (position === end || text.charAt(position) !== ':') {\n            const offset = negative * (3600 * hour + 60 * min);\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, offset, position, position);\n        }\n        position++;\n        // second\n        if (position > end - 2) {\n            return ~position;\n        }\n        ch = text.charAt(position);\n        if (ch < '0' || ch > '9') {\n            return ~position;\n        }\n        position++;\n        let sec = MathUtil.parseInt(ch);\n        ch = text.charAt(position);\n        if (ch < '0' || ch > '9') {\n            return ~position;\n        }\n        position++;\n        sec = sec * 10 + MathUtil.parseInt(ch);\n        if (sec > 59) {\n            return ~position;\n        }\n        const offset = negative * (3600 * hour + 60 * min + sec);\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, offset, position, position);\n    }\n\n    toString() {\n        return `LocalizedOffset(${this._textStyle})`;\n    }\n\n}\n\n//-----------------------------------------------------------------------\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/parser/LocalizedOffsetPrinterParser.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { _ as jodaInternal, DateTimeFormatterBuilder, SignStyle } from 'js-joda';\n\nimport { WeekFields } from '../../temporal/WeekFields';\n\nconst { StringBuilder } = jodaInternal;\n\nexport default class WeekFieldsPrinterParser {\n    constructor(letter, count) {\n        this._letter = letter;\n        this._count = count;\n    }\n\n    print(context, buf) {\n        const weekFields = WeekFields.of(context.locale());\n        const pp = this._evaluate(weekFields);\n        return pp.print(context, buf);\n    }\n\n    parse(context, text, position) {\n        const weekFields = WeekFields.of(context.locale());\n        const pp = this._evaluate(weekFields);\n        return pp.parse(context, text, position);\n    }\n\n    _evaluate(weekFields) {\n        let pp = null;\n        switch (this._letter) {\n            case 'e':  // day-of-week\n                pp = new DateTimeFormatterBuilder.NumberPrinterParser(weekFields.dayOfWeek(), this._count, 2, SignStyle.NOT_NEGATIVE);\n                break;\n            case 'c':  // day-of-week\n                pp = new DateTimeFormatterBuilder.NumberPrinterParser(weekFields.dayOfWeek(), this._count, 2, SignStyle.NOT_NEGATIVE);\n                break;\n            case 'w':  // week-of-year\n                pp = new DateTimeFormatterBuilder.NumberPrinterParser(weekFields.weekOfWeekBasedYear(), this._count, 2, SignStyle.NOT_NEGATIVE);\n                break;\n            case 'W':  // week-of-month\n                pp = new DateTimeFormatterBuilder.NumberPrinterParser(weekFields.weekOfMonth(), 1, 2, SignStyle.NOT_NEGATIVE);\n                break;\n            case 'Y':  // weekyear\n                if (this._count === 2) {\n                    pp = new DateTimeFormatterBuilder.ReducedPrinterParser(weekFields.weekBasedYear(), 2, 2, 0, DateTimeFormatterBuilder.ReducedPrinterParser.BASE_DATE);\n                } else {\n                    pp = new DateTimeFormatterBuilder.NumberPrinterParser(weekFields.weekBasedYear(), this._count, 19,\n                        (this._count < 4) ? SignStyle.NORMAL : SignStyle.EXCEEDS_PAD, -1);\n                }\n                break;\n        }\n        return pp;\n    }\n\n    toString() {\n        const sb = new StringBuilder(30);\n        sb.append('Localized(');\n        if (this._letter === 'Y') {\n            if (this._count === 1) {\n                sb.append('WeekBasedYear');\n            } else if (this._count === 2) {\n                sb.append('ReducedValue(WeekBasedYear,2,2,2000-01-01)');\n            } else {\n                sb.append('WeekBasedYear,').append(this._count).append(',')\n                    .append(19).append(',')\n                    .append((this._count < 4) ? SignStyle.NORMAL : SignStyle.EXCEEDS_PAD);\n            }\n        } else {\n            if (this._letter === 'c' || this._letter === 'e') {\n                sb.append('DayOfWeek');\n            } else if (this._letter === 'w') {\n                sb.append('WeekOfWeekBasedYear');\n            } else if (this._letter === 'W') {\n                sb.append('WeekOfMonth');\n            }\n            sb.append(',');\n            sb.append(this._count);\n        }\n        sb.append(')');\n        return sb.toString();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/parser/WeekFieldsPrinterParser.js","/*\n * @copyright (c) 2017, Philipp Thuerwaechter & Pattrick Hueper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { _ as jodaInternal, DateTimeFormatter } from 'js-joda';\n// eslint-disable-next-line no-unused-vars, (needed for esdoc)\nimport Locale from '../Locale';\n\nconst { assert: { requireNonNull } } = jodaInternal;\n\nexport default class LocaleDateTimeFormatter extends DateTimeFormatter {\n\n    /**\n     * Returns a copy of this formatter with a new locale.\n     * <p>\n     * This is used to lookup any part of the formatter needing specific\n     * localization, such as the text or localized pattern.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!Locale} locale  the new locale, not null\n     * @return a formatter based on this formatter with the requested locale, not null\n     */\n    withLocale(locale) {\n        requireNonNull(locale, 'locale');\n        if (locale.equals(this._locale)) {\n            return this;\n        }\n        return new DateTimeFormatter(this._printerParser, locale, this._decimalStyle, this._resolverStyle, this._resolverFields, this._chrono, this._zone);\n    }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/LocaleDateTimeFormatter.js","/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { _init as localeInit } from './Locale';\nimport { _init as weekFieldsInit } from './temporal/WeekFields';\n\nlet isInit = false;\n\nfunction init() {\n    /* istanbul ignore if */\n    if (isInit) {\n        return;\n    }\n\n    isInit = true;\n\n    localeInit();\n    weekFieldsInit();\n}\n\ninit();\n\n\n\n// WEBPACK FOOTER //\n// ./src/_init.js"],"sourceRoot":""}