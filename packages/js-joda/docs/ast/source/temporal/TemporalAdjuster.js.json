{
  "type": "File",
  "start": 0,
  "end": 3931,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 93,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 3931,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 93,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 235,
        "end": 280,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 45
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 243,
            "end": 261,
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 243,
              "end": 261,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 26
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail",
              "leadingComments": null
            },
            "local": {
              "type": "Identifier",
              "start": 243,
              "end": 261,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 26
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail"
            },
            "leadingComments": null
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 268,
          "end": 279,
          "loc": {
            "start": {
              "line": 7,
              "column": 33
            },
            "end": {
              "line": 7,
              "column": 44
            }
          },
          "extra": {
            "rawValue": "../assert",
            "raw": "'../assert'"
          },
          "value": "../assert"
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "\r\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\r\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\r\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\r\n ",
            "start": 0,
            "end": 231,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\r\n * Strategy for adjusting a temporal object.\r\n *\r\n * Adjusters are a key tool for modifying temporal objects.\r\n * They exist to externalize the process of adjustment, permitting different\r\n * approaches, as per the strategy design pattern.\r\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n * sets the date to the last day of the month.\r\n *\r\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\r\n * The first is to invoke the method on this interface directly.\r\n * The second is to use {@link Temporal#with}:\r\n * <pre>\r\n *   // these two lines are equivalent, but the second approach is recommended\r\n *   temporal = thisAdjuster.adjustInto(temporal);\r\n *   temporal = temporal.with(thisAdjuster);\r\n * </pre>\r\n * It is recommended to use the second approach, {@link with},\r\n * as it is a lot clearer to read in code.\r\n *\r\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\r\n * last day of the month.\r\n * Adjusters may also be defined by applications.\r\n *\r\n * ### Specification for implementors\r\n *\r\n * This interface places no restrictions on the mutability of implementations,\r\n * however immutability is strongly recommended.\r\n *\r\n * @interface\r\n ",
            "start": 284,
            "end": 1528,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1530,
        "end": 3929,
        "loc": {
          "start": {
            "line": 40,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 1537,
          "end": 3929,
          "loc": {
            "start": {
              "line": 40,
              "column": 7
            },
            "end": {
              "line": 92,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 1543,
            "end": 1559,
            "loc": {
              "start": {
                "line": 40,
                "column": 13
              },
              "end": {
                "line": 40,
                "column": 29
              },
              "identifierName": "TemporalAdjuster"
            },
            "name": "TemporalAdjuster",
            "leadingComments": null
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 1560,
            "end": 3929,
            "loc": {
              "start": {
                "line": 40,
                "column": 30
              },
              "end": {
                "line": 92,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassMethod",
                "start": 3853,
                "end": 3924,
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 90,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 3853,
                  "end": 3863,
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 4
                    },
                    "end": {
                      "line": 88,
                      "column": 14
                    },
                    "identifierName": "adjustInto"
                  },
                  "name": "adjustInto",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 3864,
                    "end": 3872,
                    "loc": {
                      "start": {
                        "line": 88,
                        "column": 15
                      },
                      "end": {
                        "line": 88,
                        "column": 23
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 3873,
                  "end": 3924,
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 24
                    },
                    "end": {
                      "line": 90,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 3884,
                      "end": 3917,
                      "loc": {
                        "start": {
                          "line": 89,
                          "column": 8
                        },
                        "end": {
                          "line": 89,
                          "column": 41
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 3884,
                        "end": 3916,
                        "loc": {
                          "start": {
                            "line": 89,
                            "column": 8
                          },
                          "end": {
                            "line": 89,
                            "column": 40
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 3884,
                          "end": 3902,
                          "loc": {
                            "start": {
                              "line": 89,
                              "column": 8
                            },
                            "end": {
                              "line": 89,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 3903,
                            "end": 3915,
                            "loc": {
                              "start": {
                                "line": 89,
                                "column": 27
                              },
                              "end": {
                                "line": 89,
                                "column": 39
                              }
                            },
                            "extra": {
                              "rawValue": "adjustInto",
                              "raw": "'adjustInto'"
                            },
                            "value": "adjustInto"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\r\n     * Adjusts the specified temporal object.\r\n     *\r\n     * This adjusts the specified temporal object using the logic\r\n     * encapsulated in the implementing class.\r\n     * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n     * sets the date to the last day of the month.\r\n     *\r\n     * There are two equivalent ways of using this method.\r\n     * The first is to invoke this method directly.\r\n     * The second is to use {@link Temporal#with}:\r\n     * <pre>\r\n     *   // these two lines are equivalent, but the second approach is recommended\r\n     *   temporal = thisAdjuster.adjustInto(temporal);\r\n     *   temporal = temporal.with(thisAdjuster);\r\n     * </pre>\r\n     * It is recommended to use the second approach, {@link with},\r\n     * as it is a lot clearer to read in code.\r\n     *\r\n     * ### Specification for implementors\r\n     *\r\n     * The implementation must take the input object and adjust it.\r\n     * The implementation defines the logic of the adjustment and is responsible for\r\n     * documenting that logic. It may use any method on {@link Temporal} to\r\n     * query the temporal object and perform the adjustment.\r\n     * The returned object must have the same observable type as the input object\r\n     *\r\n     * The input object must not be altered.\r\n     * Instead, an adjusted copy of the original must be returned.\r\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\r\n     *\r\n     * The input temporal object may be in a calendar system other than ISO.\r\n     * Implementations may choose to document compatibility with other calendar systems,\r\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\r\n     *\r\n     * This method may be called from multiple threads in parallel.\r\n     * It must be thread-safe when invoked.\r\n     *\r\n     * @param {Temporal} temporal  the temporal object to adjust, not null\r\n     * @return {Temporal} an object of the same observable type with the adjustment made, not null\r\n     * @throws DateTimeException if unable to make the adjustment\r\n     * @throws ArithmeticException if numeric overflow occurs\r\n     *\r\n     * @abstract\r\n     ",
                    "start": 1569,
                    "end": 3799,
                    "loc": {
                      "start": {
                        "line": 42,
                        "column": 4
                      },
                      "end": {
                        "line": 86,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 3805,
                    "end": 3847,
                    "loc": {
                      "start": {
                        "line": 87,
                        "column": 4
                      },
                      "end": {
                        "line": 87,
                        "column": 46
                      }
                    }
                  }
                ]
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\r\n * Strategy for adjusting a temporal object.\r\n *\r\n * Adjusters are a key tool for modifying temporal objects.\r\n * They exist to externalize the process of adjustment, permitting different\r\n * approaches, as per the strategy design pattern.\r\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n * sets the date to the last day of the month.\r\n *\r\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\r\n * The first is to invoke the method on this interface directly.\r\n * The second is to use {@link Temporal#with}:\r\n * <pre>\r\n *   // these two lines are equivalent, but the second approach is recommended\r\n *   temporal = thisAdjuster.adjustInto(temporal);\r\n *   temporal = temporal.with(thisAdjuster);\r\n * </pre>\r\n * It is recommended to use the second approach, {@link with},\r\n * as it is a lot clearer to read in code.\r\n *\r\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\r\n * last day of the month.\r\n * Adjusters may also be defined by applications.\r\n *\r\n * ### Specification for implementors\r\n *\r\n * This interface places no restrictions on the mutability of implementations,\r\n * however immutability is strongly recommended.\r\n *\r\n * @interface\r\n ",
              "start": 284,
              "end": 1528,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 39,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\r\n * Strategy for adjusting a temporal object.\r\n *\r\n * Adjusters are a key tool for modifying temporal objects.\r\n * They exist to externalize the process of adjustment, permitting different\r\n * approaches, as per the strategy design pattern.\r\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n * sets the date to the last day of the month.\r\n *\r\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\r\n * The first is to invoke the method on this interface directly.\r\n * The second is to use {@link Temporal#with}:\r\n * <pre>\r\n *   // these two lines are equivalent, but the second approach is recommended\r\n *   temporal = thisAdjuster.adjustInto(temporal);\r\n *   temporal = temporal.with(thisAdjuster);\r\n * </pre>\r\n * It is recommended to use the second approach, {@link with},\r\n * as it is a lot clearer to read in code.\r\n *\r\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\r\n * last day of the month.\r\n * Adjusters may also be defined by applications.\r\n *\r\n * ### Specification for implementors\r\n *\r\n * This interface places no restrictions on the mutability of implementations,\r\n * however immutability is strongly recommended.\r\n *\r\n * @interface\r\n ",
            "start": 284,
            "end": 1528,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\r\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\r\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\r\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\r\n ",
      "start": 0,
      "end": 231,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\r\n * Strategy for adjusting a temporal object.\r\n *\r\n * Adjusters are a key tool for modifying temporal objects.\r\n * They exist to externalize the process of adjustment, permitting different\r\n * approaches, as per the strategy design pattern.\r\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n * sets the date to the last day of the month.\r\n *\r\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\r\n * The first is to invoke the method on this interface directly.\r\n * The second is to use {@link Temporal#with}:\r\n * <pre>\r\n *   // these two lines are equivalent, but the second approach is recommended\r\n *   temporal = thisAdjuster.adjustInto(temporal);\r\n *   temporal = temporal.with(thisAdjuster);\r\n * </pre>\r\n * It is recommended to use the second approach, {@link with},\r\n * as it is a lot clearer to read in code.\r\n *\r\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\r\n * last day of the month.\r\n * Adjusters may also be defined by applications.\r\n *\r\n * ### Specification for implementors\r\n *\r\n * This interface places no restrictions on the mutability of implementations,\r\n * however immutability is strongly recommended.\r\n *\r\n * @interface\r\n ",
      "start": 284,
      "end": 1528,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\r\n     * Adjusts the specified temporal object.\r\n     *\r\n     * This adjusts the specified temporal object using the logic\r\n     * encapsulated in the implementing class.\r\n     * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n     * sets the date to the last day of the month.\r\n     *\r\n     * There are two equivalent ways of using this method.\r\n     * The first is to invoke this method directly.\r\n     * The second is to use {@link Temporal#with}:\r\n     * <pre>\r\n     *   // these two lines are equivalent, but the second approach is recommended\r\n     *   temporal = thisAdjuster.adjustInto(temporal);\r\n     *   temporal = temporal.with(thisAdjuster);\r\n     * </pre>\r\n     * It is recommended to use the second approach, {@link with},\r\n     * as it is a lot clearer to read in code.\r\n     *\r\n     * ### Specification for implementors\r\n     *\r\n     * The implementation must take the input object and adjust it.\r\n     * The implementation defines the logic of the adjustment and is responsible for\r\n     * documenting that logic. It may use any method on {@link Temporal} to\r\n     * query the temporal object and perform the adjustment.\r\n     * The returned object must have the same observable type as the input object\r\n     *\r\n     * The input object must not be altered.\r\n     * Instead, an adjusted copy of the original must be returned.\r\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\r\n     *\r\n     * The input temporal object may be in a calendar system other than ISO.\r\n     * Implementations may choose to document compatibility with other calendar systems,\r\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\r\n     *\r\n     * This method may be called from multiple threads in parallel.\r\n     * It must be thread-safe when invoked.\r\n     *\r\n     * @param {Temporal} temporal  the temporal object to adjust, not null\r\n     * @return {Temporal} an object of the same observable type with the adjustment made, not null\r\n     * @throws DateTimeException if unable to make the adjustment\r\n     * @throws ArithmeticException if numeric overflow occurs\r\n     *\r\n     * @abstract\r\n     ",
      "start": 1569,
      "end": 3799,
      "loc": {
        "start": {
          "line": 42,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 3805,
      "end": 3847,
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 46
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "\r\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\r\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\r\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\r\n ",
      "start": 0,
      "end": 231,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 235,
      "end": 241,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 242,
      "end": 243,
      "loc": {
        "start": {
          "line": 7,
          "column": 7
        },
        "end": {
          "line": 7,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 243,
      "end": 261,
      "loc": {
        "start": {
          "line": 7,
          "column": 8
        },
        "end": {
          "line": 7,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 261,
      "end": 262,
      "loc": {
        "start": {
          "line": 7,
          "column": 26
        },
        "end": {
          "line": 7,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 263,
      "end": 267,
      "loc": {
        "start": {
          "line": 7,
          "column": 28
        },
        "end": {
          "line": 7,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../assert",
      "start": 268,
      "end": 279,
      "loc": {
        "start": {
          "line": 7,
          "column": 33
        },
        "end": {
          "line": 7,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 279,
      "end": 280,
      "loc": {
        "start": {
          "line": 7,
          "column": 44
        },
        "end": {
          "line": 7,
          "column": 45
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\r\n * Strategy for adjusting a temporal object.\r\n *\r\n * Adjusters are a key tool for modifying temporal objects.\r\n * They exist to externalize the process of adjustment, permitting different\r\n * approaches, as per the strategy design pattern.\r\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n * sets the date to the last day of the month.\r\n *\r\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\r\n * The first is to invoke the method on this interface directly.\r\n * The second is to use {@link Temporal#with}:\r\n * <pre>\r\n *   // these two lines are equivalent, but the second approach is recommended\r\n *   temporal = thisAdjuster.adjustInto(temporal);\r\n *   temporal = temporal.with(thisAdjuster);\r\n * </pre>\r\n * It is recommended to use the second approach, {@link with},\r\n * as it is a lot clearer to read in code.\r\n *\r\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\r\n * last day of the month.\r\n * Adjusters may also be defined by applications.\r\n *\r\n * ### Specification for implementors\r\n *\r\n * This interface places no restrictions on the mutability of implementations,\r\n * however immutability is strongly recommended.\r\n *\r\n * @interface\r\n ",
      "start": 284,
      "end": 1528,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1530,
      "end": 1536,
      "loc": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 1537,
      "end": 1542,
      "loc": {
        "start": {
          "line": 40,
          "column": 7
        },
        "end": {
          "line": 40,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalAdjuster",
      "start": 1543,
      "end": 1559,
      "loc": {
        "start": {
          "line": 40,
          "column": 13
        },
        "end": {
          "line": 40,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1560,
      "end": 1561,
      "loc": {
        "start": {
          "line": 40,
          "column": 30
        },
        "end": {
          "line": 40,
          "column": 31
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\r\n     * Adjusts the specified temporal object.\r\n     *\r\n     * This adjusts the specified temporal object using the logic\r\n     * encapsulated in the implementing class.\r\n     * Examples might be an adjuster that sets the date avoiding weekends, or one that\r\n     * sets the date to the last day of the month.\r\n     *\r\n     * There are two equivalent ways of using this method.\r\n     * The first is to invoke this method directly.\r\n     * The second is to use {@link Temporal#with}:\r\n     * <pre>\r\n     *   // these two lines are equivalent, but the second approach is recommended\r\n     *   temporal = thisAdjuster.adjustInto(temporal);\r\n     *   temporal = temporal.with(thisAdjuster);\r\n     * </pre>\r\n     * It is recommended to use the second approach, {@link with},\r\n     * as it is a lot clearer to read in code.\r\n     *\r\n     * ### Specification for implementors\r\n     *\r\n     * The implementation must take the input object and adjust it.\r\n     * The implementation defines the logic of the adjustment and is responsible for\r\n     * documenting that logic. It may use any method on {@link Temporal} to\r\n     * query the temporal object and perform the adjustment.\r\n     * The returned object must have the same observable type as the input object\r\n     *\r\n     * The input object must not be altered.\r\n     * Instead, an adjusted copy of the original must be returned.\r\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\r\n     *\r\n     * The input temporal object may be in a calendar system other than ISO.\r\n     * Implementations may choose to document compatibility with other calendar systems,\r\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\r\n     *\r\n     * This method may be called from multiple threads in parallel.\r\n     * It must be thread-safe when invoked.\r\n     *\r\n     * @param {Temporal} temporal  the temporal object to adjust, not null\r\n     * @return {Temporal} an object of the same observable type with the adjustment made, not null\r\n     * @throws DateTimeException if unable to make the adjustment\r\n     * @throws ArithmeticException if numeric overflow occurs\r\n     *\r\n     * @abstract\r\n     ",
      "start": 1569,
      "end": 3799,
      "loc": {
        "start": {
          "line": 42,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 3805,
      "end": 3847,
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "adjustInto",
      "start": 3853,
      "end": 3863,
      "loc": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 88,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3863,
      "end": 3864,
      "loc": {
        "start": {
          "line": 88,
          "column": 14
        },
        "end": {
          "line": 88,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 3864,
      "end": 3872,
      "loc": {
        "start": {
          "line": 88,
          "column": 15
        },
        "end": {
          "line": 88,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3872,
      "end": 3873,
      "loc": {
        "start": {
          "line": 88,
          "column": 23
        },
        "end": {
          "line": 88,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3873,
      "end": 3874,
      "loc": {
        "start": {
          "line": 88,
          "column": 24
        },
        "end": {
          "line": 88,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 3884,
      "end": 3902,
      "loc": {
        "start": {
          "line": 89,
          "column": 8
        },
        "end": {
          "line": 89,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3902,
      "end": 3903,
      "loc": {
        "start": {
          "line": 89,
          "column": 26
        },
        "end": {
          "line": 89,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "adjustInto",
      "start": 3903,
      "end": 3915,
      "loc": {
        "start": {
          "line": 89,
          "column": 27
        },
        "end": {
          "line": 89,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3915,
      "end": 3916,
      "loc": {
        "start": {
          "line": 89,
          "column": 39
        },
        "end": {
          "line": 89,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3916,
      "end": 3917,
      "loc": {
        "start": {
          "line": 89,
          "column": 40
        },
        "end": {
          "line": 89,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3923,
      "end": 3924,
      "loc": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3928,
      "end": 3929,
      "loc": {
        "start": {
          "line": 92,
          "column": 0
        },
        "end": {
          "line": 92,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3931,
      "end": 3931,
      "loc": {
        "start": {
          "line": 93,
          "column": 0
        },
        "end": {
          "line": 93,
          "column": 0
        }
      }
    }
  ]
}