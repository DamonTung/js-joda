{"version":3,"sources":["webpack://JSJodaTimezone/webpack/universalModuleDefinition","webpack://JSJodaTimezone/webpack/bootstrap","webpack://JSJodaTimezone/./src/MomentZoneRules.js","webpack://JSJodaTimezone/./src/MomentZoneRulesProvider.js","webpack://JSJodaTimezone/./src/js-joda-timezone-empty.js","webpack://JSJodaTimezone/./src/plug.js","webpack://JSJodaTimezone/./src/system-default-zone.js","webpack://JSJodaTimezone/./src/unpack.js","webpack://JSJodaTimezone/external {\"amd\":\"js-joda\",\"commonjs\":\"js-joda\",\"commonjs2\":\"js-joda\",\"root\":\"JSJoda\"}"],"names":["MomentZoneRules","tzdbInfo","_tzdbInfo","_ldtUntils","LDTUntils","untils","offsets","isFixedOffset","length","offsetOfInstant","instant","epochMilli","toEpochMilli","offsetOfEpochMilli","index","binarySearch","ofTotalSeconds","_offsetByIndexInSeconds","offsetOfLocalDateTime","localDateTime","info","_offsetInfo","offsetBefore","ldtBinarySearch","offsetIndex","ldtBefore","get","Math","max","ldtAfter","min","size","offsetAfter","compareTo","of","offsetInSeconds","validOffsets","transition","standardOffset","notSupported","daylightSavings","isDaylightSavings","isValidOffset","offset","some","o","equals","nextTransition","previousTransition","transitions","transitionRules","other","toString","name","_tzdbUntils","tzdbOffsets","_tzdbOffsets","_generateTupple","epochMillis","Infinity","MAX","ofEpochMilli","offset1","zone1","ldt1","ofInstant","nextIndex","offset2","zone2","ldt2","_getTupple","ldtTupple","array","value","hi","lo","mid","isBefore","tzdbOffset","roundDown","r","ceil","floor","msg","Error","TZDB_DATA","TZDB_VERSION","AVAILABLE_ZONE_IDS","zones","links","MomentZoneRulesProvider","getRules","zoneId","tzdbZoneInfo","getAvailableZoneIds","getVersion","getTzdbData","loadTzdbData","packedJson","version","packedZoneInfo","push","packedLink","link","split","jsJoda","ZoneRulesProvider","ZoneId","extendSystemDefaultZoneId","getResolvedZoneId","resolvedTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","err","resolvedZoneId","systemDefault","unpack","charCodeToInt","charCode","unpackBase60","string","i","parts","whole","fractional","multiplier","num","out","sign","charCodeAt","arrayToInt","intToUntil","round","mapIndices","source","indices","data","abbrs","population"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;AC7DA;;;;;;+eANA;;;;;;IAUaA,e,WAAAA,e;;;AACT,6BAAYC,QAAZ,EAAqB;AAAA;;AAAA,qDACjB,qBADiB;;AAEjB,cAAKC,SAAL,GAAiBD,QAAjB;AACA,cAAKE,UAAL,GAAkB,IAAIC,SAAJ,CAAc,MAAKF,SAAL,CAAeG,MAA7B,EAAqC,MAAKH,SAAL,CAAeI,OAApD,CAAlB;AAHiB;AAIpB;;8BAMDC,a,4BAAe;AACX,eAAO,KAAKL,SAAL,CAAeI,OAAf,CAAuBE,MAAvB,KAAkC,CAAzC;AACH,K;;8BAeDC,e,4BAAgBC,O,EAAQ;AACpB,YAAMC,aAAaD,QAAQE,YAAR,EAAnB;AACA,eAAO,KAAKC,kBAAL,CAAwBF,UAAxB,CAAP;AACH,K;;8BAWDE,kB,+BAAmBF,U,EAAW;AAC1B,YAAMG,QAASC,aAAa,KAAKb,SAAL,CAAeG,MAA5B,EAAoCM,UAApC,CAAf;AACA,eAAO,mBAAWK,cAAX,CAA0B,KAAKC,uBAAL,CAA6BH,KAA7B,CAA1B,CAAP;AACH,K;;8BA+BDI,qB,kCAAsBC,a,EAAc;AAChC,YAAMC,OAAO,KAAKC,WAAL,CAAiBF,aAAjB,CAAb;AACA,YAAIC,4CAAJ,EAA0C;AACtC,mBAAOA,KAAKE,YAAL,EAAP;AACH;AACD,eAAOF,IAAP;AACH,K;;8BAEDC,W,wBAAYF,a,EAAe;AACvB,YAAML,QAASS,gBAAgB,KAAKpB,UAArB,EAAiCgB,aAAjC,CAAf;AACA,YAAMK,cAAcV,SAAS,CAA7B;;AAEA,YAAIA,QAAQ,CAAR,KAAc,CAAlB,EAAoB;AAChB,gBAAMW,YAAY,KAAKtB,UAAL,CAAgBuB,GAAhB,CAAoBC,KAAKC,GAAL,CAASd,QAAM,CAAf,EAAkB,CAAlB,CAApB,CAAlB;AACA,gBAAMe,WAAW,KAAK1B,UAAL,CAAgBuB,GAAhB,CAAoBC,KAAKG,GAAL,CAAShB,KAAT,EAAgB,KAAKX,UAAL,CAAgB4B,IAAhB,GAAqB,CAArC,CAApB,CAAjB;AACA,gBAAMT,eAAe,mBAAWN,cAAX,CAA0B,KAAKC,uBAAL,CAA6BO,WAA7B,CAA1B,CAArB;AACA,gBAAMQ,cAAc,mBAAWhB,cAAX,CAA0B,KAAKC,uBAAL,CAA6BU,KAAKG,GAAL,CAASN,cAAY,CAArB,EAAwB,KAAKtB,SAAL,CAAeI,OAAf,CAAuBE,MAAvB,GAA8B,CAAtD,CAA7B,CAA1B,CAApB;;AAEA,gBAAIc,aAAaW,SAAb,CAAuBD,WAAvB,IAAsC,CAA1C,EAA6C;AAGzC,uBAAO,6BAAqBE,EAArB,CAAwBT,SAAxB,EAAmCH,YAAnC,EAAiDU,WAAjD,CAAP;AACH,aAJD,MAIO;AAGH,uBAAO,6BAAqBE,EAArB,CAAwBL,QAAxB,EAAkCP,YAAlC,EAAgDU,WAAhD,CAAP;AACH;AACJ;AACD,eAAO,mBAAWhB,cAAX,CAA0B,KAAKC,uBAAL,CAA6BO,WAA7B,CAA1B,CAAP;AACH,K;;8BAEDP,uB,oCAAwBH,K,EAAM;AAC1B,eAAO,CAACqB,gBAAgB,KAAKjC,SAAL,CAAeI,OAAf,CAAuBQ,KAAvB,CAAhB,CAAR;AACH,K;;8BA4CDsB,Y,yBAAajB,a,EAAc;AACvB,YAAMC,OAAO,KAAKC,WAAL,CAAiBF,aAAjB,CAAb;AACA,YAAIC,4CAAJ,EAA0C;AACtC,mBAAOA,KAAKgB,YAAL,EAAP;AACH;AACD,eAAO,CAAChB,IAAD,CAAP;AACH,K;;8BAqCDiB,U,uBAAWlB,a,EAAc;AACrB,YAAMC,OAAO,KAAKC,WAAL,CAAiBF,aAAjB,CAAb;AACA,YAAIC,4CAAJ,EAA0C;AACtC,mBAAOA,IAAP;AACH;AACD,eAAO,IAAP;AACH,K;;8BAgBDkB,c,2BAAe5B,O,EAAQ;AACnB6B,qBAAa,0BAAb;AACH,K;;8BAgBDC,e,4BAAgB9B,O,EAAQ;AACpB6B,qBAAa,2BAAb;AACH,K;;8BAYDE,iB,8BAAkB/B,O,EAAS;AACvB6B,qBAAa,6BAAb;AACH,K;;8BAaDG,a,0BAAcvB,a,EAAewB,M,EAAO;AAChC,eAAO,KAAKP,YAAL,CAAkBjB,aAAlB,EAAiCyB,IAAjC,CAAuC;AAAA,mBAAKC,EAAEC,MAAF,CAASH,MAAT,CAAL;AAAA,SAAvC,CAAP;AACH,K;;8BAeDI,c,2BAAerC,O,EAAQ;AACnB6B,qBAAa,0BAAb;AACH,K;;8BAcDS,kB,+BAAmBtC,O,EAAQ;AACvB6B,qBAAa,8BAAb;AACH,K;;8BAcDU,W,0BAAa;AACTV,qBAAa,uBAAb;AACH,K;;8BAuBDW,e,8BAAiB;AACbX,qBAAa,2BAAb;AACH,K;;8BAODO,M,mBAAOK,K,EAAO;AACV,YAAI,SAASA,KAAb,EAAoB;AAChB,mBAAO,IAAP;AACH;AACD,YAAIA,iBAAiBnD,eAArB,EAAsC;AAClC,mBAAO,KAAKE,SAAL,KAAmBiD,MAAMjD,SAAhC;AACH;AACD,eAAO,KAAP;AACH,K;;8BAMDkD,Q,uBAAW;AACP,eAAO,KAAKlD,SAAL,CAAemD,IAAtB;AACH,K;;;;;IAGCjD,S;AACF,uBAAYkD,WAAZ,EAAyBC,WAAzB,EAAsC;AAAA;;AAClC,aAAKD,WAAL,GAAmBA,WAAnB;AACA,aAAKE,YAAL,GAAoBD,WAApB;AACA,aAAKpD,UAAL,GAAkB,EAAlB;AACA,aAAK4B,IAAL,GAAY,KAAKuB,WAAL,CAAiB9C,MAAjB,GAA0B,CAAtC;AACH;;wBAGDiD,e,4BAAgB3C,K,EAAO;AACnB,YAAM4C,cAAc,KAAKJ,WAAL,CAAiBxC,KAAjB,CAApB;AACA,YAAI4C,gBAAgBC,QAApB,EAA8B;AAC1B,mBAAO,CAAC,sBAAcC,GAAf,EAAoB,sBAAcA,GAAlC,CAAP;AACH;AACD,YAAMlD,UAAU,gBAAQmD,YAAR,CAAqBH,WAArB,CAAhB;;AAEA,YAAMI,UAAU3B,gBAAgB,KAAKqB,YAAL,CAAkB1C,KAAlB,CAAhB,CAAhB;AACA,YAAMiD,QAAQ,mBAAW/C,cAAX,CAA0B,CAAC8C,OAA3B,CAAd;AACA,YAAME,OAAO,sBAAcC,SAAd,CAAwBvD,OAAxB,EAAiCqD,KAAjC,CAAb;;AAEA,YAAMG,YAAYvC,KAAKG,GAAL,CAAShB,QAAQ,CAAjB,EAAoB,KAAK0C,YAAL,CAAkBhD,MAAlB,GAA2B,CAA/C,CAAlB;AACA,YAAM2D,UAAUhC,gBAAgB,KAAKqB,YAAL,CAAkBU,SAAlB,CAAhB,CAAhB;AACA,YAAME,QAAQ,mBAAWpD,cAAX,CAA0B,CAACmD,OAA3B,CAAd;AACA,YAAME,OAAO,sBAAcJ,SAAd,CAAwBvD,OAAxB,EAAiC0D,KAAjC,CAAb;;AAEA,YAAGN,UAAUK,OAAb,EAAsB;AAClB,mBAAO,CAACH,IAAD,EAAOK,IAAP,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,CAACA,IAAD,EAAOL,IAAP,CAAP;AACH;AACJ,K;;wBAEDM,U,uBAAWxD,K,EAAM;AACb,YAAI,KAAKX,UAAL,CAAgBW,KAAhB,KAA0B,IAA9B,EAAoC;AAChC,iBAAKX,UAAL,CAAgBW,KAAhB,IAAyB,KAAK2C,eAAL,CAAqB3C,KAArB,CAAzB;AACH;AACD,eAAO,KAAKX,UAAL,CAAgBW,KAAhB,CAAP;AACH,K;;wBAEDY,G,gBAAIZ,K,EAAO;AACP,YAAMyD,YAAY,KAAKD,UAAL,CAAgBxD,SAAS,CAAzB,CAAlB;AACA,eAAOyD,UAAUzD,QAAQ,CAAlB,CAAP;AACH,K;;;;;AAKL,SAASS,eAAT,CAAyBiD,KAAzB,EAAgCC,KAAhC,EAAuC;AACnC,QAAIC,KAAKF,MAAMzC,IAAN,GAAa,CAAtB;AAAA,QAAyB4C,KAAK,CAAC,CAA/B;AAAA,QAAkCC,YAAlC;AACA,WAAOF,KAAKC,EAAL,GAAU,CAAjB,EAAoB;AAChB,YAAI,CAACF,MAAMI,QAAN,CAAeL,MAAM9C,GAAN,CAAUkD,MAAMF,KAAKC,EAAL,IAAW,CAA3B,CAAf,CAAL,EAAoD;AAChDA,iBAAKC,GAAL;AACH,SAFD,MAEO;AACHF,iBAAKE,GAAL;AACH;AACJ;AACD,WAAOF,EAAP;AACH;;AAED,SAASvC,eAAT,CAAyB2C,UAAzB,EAAoC;AAChC,WAAOC,UAAU,CAACD,UAAD,GAAY,EAAtB,CAAP;AACH;;AAED,SAASC,SAAT,CAAmBC,CAAnB,EAAqB;AACjB,QAAIA,IAAI,CAAR,EAAW;AACP,eAAOrD,KAAKsD,IAAL,CAAUD,CAAV,CAAP;AACH,KAFD,MAEO;AACH,eAAOrD,KAAKuD,KAAL,CAAWF,CAAX,CAAP;AACH;AACJ;;AAID,SAASjE,YAAT,CAAsByD,KAAtB,EAA6BC,KAA7B,EAAoC;AAChC,QAAIC,KAAKF,MAAMhE,MAAN,GAAe,CAAxB;AAAA,QAA2BmE,KAAK,CAAC,CAAjC;AAAA,QAAoCC,YAApC;AACA,WAAOF,KAAKC,EAAL,GAAU,CAAjB,EAAoB;AAChB,YAAIH,MAAMI,MAAMF,KAAKC,EAAL,IAAW,CAAvB,KAA6BF,KAAjC,EAAwC;AACpCE,iBAAKC,GAAL;AACH,SAFD,MAEO;AACHF,iBAAKE,GAAL;AACH;AACJ;AACD,WAAOF,EAAP;AACH;;AAED,SAASnC,YAAT,CAAsB4C,GAAtB,EAA0B;AACtB,UAAM,IAAIC,KAAJ,CAAU,oBAAoBD,GAA9B,CAAN;AACH,C;;;;;;;;;;;;;;;;;AC1cD;;AAKA;;AAEA;;;;;;+eAbA;;;;;;AAeA,IAAIE,kBAAJ;AACA,IAAIC,qBAAJ;AACA,IAAMC,qBAAqB,EAA3B;;AAEA,IAAMC,QAAQ,EAAd;AACA,IAAMC,QAAQ,EAAd;;IAEaC,uB,WAAAA,uB;;;;;;;;;4BAWFC,Q,qBAASC,M,EAAO;AACnB,YAAMC,eAAeL,MAAMC,MAAMG,MAAN,CAAN,CAArB;AACA,YAAGC,gBAAgB,IAAnB,EAAwB;AACpB,kBAAM,8BAAsB,2BAA2BD,MAAjD,CAAN;AACH;AACD,eAAO,qCAAoBC,YAApB,CAAP;AACH,K;;4BAUMC,mB,kCAAqB;AACxB,eAAOP,kBAAP;AACH,K;;4BAMMQ,U,yBAAa;AAChB,eAAOT,YAAP;AACH,K;;4BAQMU,W,0BAAa;AAChB,eAAOX,SAAP;AACH,K;;4BAQMY,Y,yBAAaC,U,EAAW;AAC3Bb,oBAAYa,UAAZ;AACAZ,uBAAeY,WAAWC,OAA1B;;AAEA,6BAA6BD,WAAWV,KAAxC,kHAA+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAApCY,cAAoC;;AAC3C,gBAAMP,eAAe,oBAAOO,cAAP,CAArB;AACAb,+BAAmBc,IAAnB,CAAwBR,aAAaxC,IAArC;AACAmC,kBAAMK,aAAaxC,IAAnB,IAA2BwC,YAA3B;AACAJ,kBAAMI,aAAaxC,IAAnB,IAA2BwC,aAAaxC,IAAxC;AACH;;AAED,8BAAyB6C,WAAWT,KAApC,yHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAAhCa,UAAgC;;AACvC,gBAAMC,OAAOD,WAAWE,KAAX,CAAiB,GAAjB,CAAb;AACAjB,+BAAmBc,IAAnB,CAAwBE,KAAK,CAAL,CAAxB;AACAd,kBAAMc,KAAK,CAAL,CAAN,IAAiBA,KAAK,CAAL,CAAjB;AACH;AACJ,K;;;;;;;;;;;;;;;;;;;ACxFL;;;;;;kCALA;;;;;;;;;;;;;;;;;;;;;kBCQe,UAAUE,MAAV,EAAkB;AAC7BA,WAAOC,iBAAP,CAAyBf,QAAzB,GAAoC,iDAAwBA,QAA5D;AACAc,WAAOC,iBAAP,CAAyBZ,mBAAzB,GAA+C,iDAAwBA,mBAAvE;AACAW,WAAOC,iBAAP,CAAyBV,WAAzB,GAAuC,iDAAwBA,WAA/D;AACAS,WAAOC,iBAAP,CAAyBT,YAAzB,GAAwC,iDAAwBA,YAAhE;;AAEA,qCAA0BQ,OAAOE,MAAjC;AACA,WAAOF,MAAP;AACH,C;;AAXD;;AACA;;;;;;qCANA;;;;;;;;;;;;;;;;;;kBCWwBG,yB;;AAVxB,SAASC,iBAAT,CAA2BF,MAA3B,EAAmC;AAC/B,QAAI;AACA,YAAMG,mBAAmBC,KAAKC,cAAL,GAAsBC,eAAtB,GAAwCC,QAAjE;AACA,eAAOP,OAAOzE,EAAP,CAAU4E,gBAAV,CAAP;AACH,KAHD,CAGE,OAAOK,GAAP,EAAY,CAEb;AACD,WAAO,IAAP;AACH;;AAEc,SAASP,yBAAT,CAAmCD,MAAnC,EAA2C;AACtD,QAAMS,iBAAiBP,kBAAkBF,MAAlB,CAAvB;;AAEA,QAAIS,kBAAkB,IAAtB,EAA4B;AACxB;AACH;;AAEDT,WAAOU,aAAP,GAAuB,YAAY;AAC/B,eAAOD,cAAP;AACH,KAFD;AAGH;;;;;;;;;;;;;;;;QCwDeE,M,GAAAA,M;;;AAjEhB,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,QAAIA,WAAW,EAAf,EAAmB;AACf,eAAOA,WAAW,EAAlB;AACH,KAFD,MAEO,IAAIA,WAAW,EAAf,EAAmB;AACtB,eAAOA,WAAW,EAAlB;AACH;AACD,WAAOA,WAAW,EAAlB;AACH;;AAED,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAIC,IAAI,CAAR;AAAA,QACIC,QAAQF,OAAOlB,KAAP,CAAa,GAAb,CADZ;AAAA,QAEIqB,QAAQD,MAAM,CAAN,CAFZ;AAAA,QAGIE,aAAaF,MAAM,CAAN,KAAY,EAH7B;AAAA,QAIIG,aAAa,CAJjB;AAAA,QAKIC,GALJ;AAAA,QAMIC,MAAM,CANV;AAAA,QAOIC,OAAO,CAPX;;AAUA,QAAIR,OAAOS,UAAP,CAAkB,CAAlB,MAAyB,EAA7B,EAAiC;AAC7BR,YAAI,CAAJ;AACAO,eAAO,CAAC,CAAR;AACH;;AAGD,SAAKP,CAAL,EAAQA,IAAIE,MAAMrH,MAAlB,EAA0BmH,GAA1B,EAA+B;AAC3BK,cAAMT,cAAcM,MAAMM,UAAN,CAAiBR,CAAjB,CAAd,CAAN;AACAM,cAAM,KAAKA,GAAL,GAAWD,GAAjB;AACH;;AAGD,SAAKL,IAAI,CAAT,EAAYA,IAAIG,WAAWtH,MAA3B,EAAmCmH,GAAnC,EAAwC;AACpCI,qBAAaA,aAAa,EAA1B;AACAC,cAAMT,cAAcO,WAAWK,UAAX,CAAsBR,CAAtB,CAAd,CAAN;AACAM,eAAOD,MAAMD,UAAb;AACH;;AAED,WAAOE,MAAMC,IAAb;AACH;;AAED,SAASE,UAAT,CAAqB5D,KAArB,EAA4B;AACxB,SAAK,IAAImD,IAAI,CAAb,EAAgBA,IAAInD,MAAMhE,MAA1B,EAAkCmH,GAAlC,EAAuC;AACnCnD,cAAMmD,CAAN,IAAWF,aAAajD,MAAMmD,CAAN,CAAb,CAAX;AACH;AACJ;;AAED,SAASU,UAAT,CAAqB7D,KAArB,EAA4BhE,MAA5B,EAAoC;AAChC,SAAK,IAAImH,IAAI,CAAb,EAAgBA,IAAInH,MAApB,EAA4BmH,GAA5B,EAAiC;AAC7BnD,cAAMmD,CAAN,IAAWhG,KAAK2G,KAAL,CAAW,CAAC9D,MAAMmD,IAAI,CAAV,KAAgB,CAAjB,IAAuBnD,MAAMmD,CAAN,IAAW,KAA7C,CAAX;AACH;;AAEDnD,UAAMhE,SAAS,CAAf,IAAoBmD,QAApB;AACH;;AAED,SAAS4E,UAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAClC,QAAIR,MAAM,EAAV;AAAA,QAAcN,CAAd;;AAEA,SAAKA,IAAI,CAAT,EAAYA,IAAIc,QAAQjI,MAAxB,EAAgCmH,GAAhC,EAAqC;AACjCM,YAAIN,CAAJ,IAASa,OAAOC,QAAQd,CAAR,CAAP,CAAT;AACH;;AAED,WAAOM,GAAP;AACH;;AAEM,SAASX,MAAT,CAAiBI,MAAjB,EAAyB;AAC5B,QAAIgB,OAAOhB,OAAOlB,KAAP,CAAa,GAAb,CAAX;AAAA,QACIlG,UAAUoI,KAAK,CAAL,EAAQlC,KAAR,CAAc,GAAd,CADd;AAAA,QAEIiC,UAAUC,KAAK,CAAL,EAAQlC,KAAR,CAAc,EAAd,CAFd;AAAA,QAGInG,SAAUqI,KAAK,CAAL,EAAQlC,KAAR,CAAc,GAAd,CAHd;;AAKA4B,eAAW9H,OAAX;AACA8H,eAAWK,OAAX;AACAL,eAAW/H,MAAX;;AAEAgI,eAAWhI,MAAX,EAAmBoI,QAAQjI,MAA3B;;AAEA,WAAO;AACH6C,cAAaqF,KAAK,CAAL,CADV;AAEHC,eAAaJ,WAAWG,KAAK,CAAL,EAAQlC,KAAR,CAAc,GAAd,CAAX,EAA+BiC,OAA/B,CAFV;AAGHnI,iBAAaiI,WAAWjI,OAAX,EAAoBmI,OAApB,CAHV;AAIHpI,gBAAaA,MAJV;AAKHuI,oBAAaF,KAAK,CAAL,IAAU;AALpB,KAAP;AAOH,C;;;;;;;;;;;AChGD,qD","file":"js-joda-timezone-empty.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"js-joda\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"js-joda\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JSJodaTimezone\"] = factory(require(\"js-joda\"));\n\telse\n\t\troot[\"JSJodaTimezone\"] = factory(root[\"JSJoda\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_js_joda__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js-joda-timezone-empty.js\");\n","/*\n * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport {\n    LocalDateTime, Instant, ZoneOffset, ZoneOffsetTransition, ZoneRules\n} from 'js-joda';\n\nexport class MomentZoneRules extends ZoneRules{\n    constructor(tzdbInfo){\n        super();\n        this._tzdbInfo = tzdbInfo;\n        this._ldtUntils = new LDTUntils(this._tzdbInfo.untils, this._tzdbInfo.offsets);\n    }\n    /**\n     * Checks of the zone rules are fixed, such that the offset never varies.\n     *\n     * @return {boolean} true if the time-zone is fixed and the offset never changes\n     */\n    isFixedOffset(){\n        return this._tzdbInfo.offsets.length === 1;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Gets the offset applicable at the specified instant in these rules.\n     * <p>\n     * The mapping from an instant to an offset is simple, there is only\n     * one valid offset for each instant.\n     * This method returns that offset.\n     *\n     * @param {Instant} instant - the instant to find the offset for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the offset, not null\n     */\n    offsetOfInstant(instant){\n        const epochMilli = instant.toEpochMilli();\n        return this.offsetOfEpochMilli(epochMilli);\n    }\n\n    /**\n     * Gets the offset applicable at the specified epochMilli in these rules.\n     *\n     * The method is for javascript performance optimisation.\n     *\n     * @param {number} epochMilli - the epoch millisecond to find the offset for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the offset, not null\n     */\n    offsetOfEpochMilli(epochMilli){\n        const index  = binarySearch(this._tzdbInfo.untils, epochMilli);\n        return ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(index));\n    }\n\n\n    /**\n     * Gets a suitable offset for the specified local date-time in these rules.\n     * <p>\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     * <p><ul>\n     * <li>Normal, with one valid offset. For the vast majority of the year, the normal\n     *  case applies, where there is a single valid offset for the local date-time.</li>\n     * <li>Gap, with zero valid offsets. This is when clocks jump forward typically\n     *  due to the spring daylight savings change from \"winter\" to \"summer\".\n     *  In a gap there are local date-time values with no valid offset.</li>\n     * <li>Overlap, with two valid offsets. This is when clocks are set back typically\n     *  due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *  In an overlap there are local date-time values with two valid offsets.</li>\n     * </ul><p>\n     * Thus, for any given local date-time there can be zero, one or two valid offsets.\n     * This method returns the single offset in the Normal case, and in the Gap or Overlap\n     * case it returns the offset before the transition.\n     * <p>\n     * Since, in the case of Gap and Overlap, the offset returned is a \"best\" value, rather\n     * than the \"correct\" value, it should be treated with care. Applications that care\n     * about the correct offset should use a combination of this method,\n     * {@link #getValidOffsets(LocalDateTime)} and {@link #getTransition(LocalDateTime)}.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time to query, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the best available offset for the local date-time, not null\n     */\n    offsetOfLocalDateTime(localDateTime){\n        const info = this._offsetInfo(localDateTime);\n        if (info instanceof ZoneOffsetTransition) {\n            return info.offsetBefore();\n        }\n        return info;\n    }\n\n    _offsetInfo(localDateTime) {\n        const index  = ldtBinarySearch(this._ldtUntils, localDateTime);\n        const offsetIndex = index >> 1;\n\n        if (index % 2 === 1){\n            const ldtBefore = this._ldtUntils.get(Math.max(index-1, 0));\n            const ldtAfter = this._ldtUntils.get(Math.min(index, this._ldtUntils.size-1));\n            const offsetBefore = ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(offsetIndex));\n            const offsetAfter = ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(Math.min(offsetIndex+1, this._tzdbInfo.offsets.length-1)));\n            // console.log(offsetBefore.toString(), offsetAfter.toString());\n            if (offsetBefore.compareTo(offsetAfter) > 0) {\n                // gap\n                // console.log('gap', ldtBefore.toString(), localDateTime.toString(), ldtAfter.toString());\n                return ZoneOffsetTransition.of(ldtBefore, offsetBefore, offsetAfter);\n            } else {\n                // overlap\n                // console.log('overlap', ldtBefore.toString(), localDateTime.toString(), ldtAfter.toString());\n                return ZoneOffsetTransition.of(ldtAfter, offsetBefore, offsetAfter);\n            }\n        }\n        return ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(offsetIndex));\n    }\n\n    _offsetByIndexInSeconds(index){\n        return -offsetInSeconds(this._tzdbInfo.offsets[index]);\n    }\n\n    /**\n     * Gets the offset applicable at the specified local date-time in these rules.\n     * <p>\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     * <p><ul>\n     * <li>Normal, with one valid offset. For the vast majority of the year, the normal\n     *  case applies, where there is a single valid offset for the local date-time.</li>\n     * <li>Gap, with zero valid offsets. This is when clocks jump forward typically\n     *  due to the spring daylight savings change from \"winter\" to \"summer\".\n     *  In a gap there are local date-time values with no valid offset.</li>\n     * <li>Overlap, with two valid offsets. This is when clocks are set back typically\n     *  due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *  In an overlap there are local date-time values with two valid offsets.</li>\n     * </ul><p>\n     * Thus, for any given local date-time there can be zero, one or two valid offsets.\n     * This method returns that list of valid offsets, which is a list of size 0, 1 or 2.\n     * In the case where there are two offsets, the earlier offset is returned at index 0\n     * and the later offset at index 1.\n     * <p>\n     * There are various ways to handle the conversion from a {@code LocalDateTime}.\n     * One technique, using this method, would be:\n     * <pre>\n     *  List<ZoneOffset> validOffsets = rules.getOffset(localDT);\n     *  if (validOffsets.size() == 1) {\n     *    // Normal case: only one valid offset\n     *    zoneOffset = validOffsets.get(0);\n     *  } else {\n     *    // Gap or Overlap: determine what to do from transition (which will be non-null)\n     *    ZoneOffsetTransition trans = rules.getTransition(localDT);\n     *  }\n     * </pre>\n     * <p>\n     * In theory, it is possible for there to be more than two valid offsets.\n     * This would happen if clocks to be put back more than once in quick succession.\n     * This has never happened in the history of time-zones and thus has no special handling.\n     * However, if it were to happen, then the list would return more than 2 entries.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time to query for valid offsets, not null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition | ZoneOffset[]} the list of valid offsets, may be immutable, not null\n     */\n    validOffsets(localDateTime){\n        const info = this._offsetInfo(localDateTime);\n        if (info instanceof ZoneOffsetTransition) {\n            return info.validOffsets();\n        }\n        return [info];\n    }\n\n    /**\n     * Gets the offset transition applicable at the specified local date-time in these rules.\n     * <p>\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     * <p><ul>\n     * <li>Normal, with one valid offset. For the vast majority of the year, the normal\n     *  case applies, where there is a single valid offset for the local date-time.</li>\n     * <li>Gap, with zero valid offsets. This is when clocks jump forward typically\n     *  due to the spring daylight savings change from \"winter\" to \"summer\".\n     *  In a gap there are local date-time values with no valid offset.</li>\n     * <li>Overlap, with two valid offsets. This is when clocks are set back typically\n     *  due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *  In an overlap there are local date-time values with two valid offsets.</li>\n     * </ul><p>\n     * A transition is used to model the cases of a Gap or Overlap.\n     * The Normal case will return null.\n     * <p>\n     * There are various ways to handle the conversion from a {@code LocalDateTime}.\n     * One technique, using this method, would be:\n     * <pre>\n     *  ZoneOffsetTransition trans = rules.getTransition(localDT);\n     *  if (trans != null) {\n     *    // Gap or Overlap: determine what to do from transition\n     *  } else {\n     *    // Normal case: only one valid offset\n     *    zoneOffset = rule.getOffset(localDT);\n     *  }\n     * </pre>\n     *\n     * @param {LocalDateTime} localDateTime  the local date-time to query for offset transition, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the offset transition, null if the local date-time is not in transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    transition(localDateTime){\n        const info = this._offsetInfo(localDateTime);\n        if (info instanceof ZoneOffsetTransition) {\n            return info;\n        }\n        return null;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the standard offset for the specified instant in this zone.\n     * <p>\n     * This provides access to historic information on how the standard offset\n     * has changed over time.\n     * The standard offset is the offset before any daylight saving time is applied.\n     * This is typically the offset applicable during winter.\n     *\n     * @param {Instant} instant - the instant to find the offset information for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the standard offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    standardOffset(instant){\n        notSupported('ZoneRules.standardOffset');\n    }\n\n    /**\n     * Gets the amount of daylight savings in use for the specified instant in this zone.\n     * <p>\n     * This provides access to historic information on how the amount of daylight\n     * savings has changed over time.\n     * This is the difference between the standard offset and the actual offset.\n     * Typically the amount is zero during winter and one hour during summer.\n     * Time-zones are second-based, so the nanosecond part of the duration will be zero.\n     *\n     * @param {Instant} instant - the instant to find the daylight savings for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {Duration} the difference between the standard and actual offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    daylightSavings(instant){\n        notSupported('ZoneRules.daylightSavings');\n    }\n\n    /**\n     * Checks if the specified instant is in daylight savings.\n     * <p>\n     * This checks if the standard and actual offsets are the same at the specified instant.\n     *\n     * @param {Instant} instant - the instant to find the offset information for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {boolean} the standard offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    isDaylightSavings(instant) {\n        notSupported('ZoneRules.isDaylightSavings');\n    }\n\n    /**\n     * Checks if the offset date-time is valid for these rules.\n     * <p>\n     * To be valid, the local date-time must not be in a gap and the offset\n     * must match the valid offsets.\n     *\n     * @param {LocalDateTime} localDateTime - the date-time to check, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @param {ZoneOffset} offset - the offset to check, null returns false\n     * @return {boolean} true if the offset date-time is valid for these rules\n     */\n    isValidOffset(localDateTime, offset){\n        return this.validOffsets(localDateTime).some( o => o.equals(offset));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the next transition after the specified instant.\n     * <p>\n     * This returns details of the next transition after the specified instant.\n     * For example, if the instant represents a point where \"Summer\" daylight savings time\n     * applies, then the method will return the transition to the next \"Winter\" time.\n     *\n     * @param {Instant} instant - the instant to get the next transition after, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the next transition after the specified instant, null if this is after the last transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    nextTransition(instant){\n        notSupported('ZoneRules.nextTransition');\n    }\n\n    /**\n     * Gets the previous transition before the specified instant.\n     * <p>\n     * This returns details of the previous transition after the specified instant.\n     * For example, if the instant represents a point where \"summer\" daylight saving time\n     * applies, then the method will return the transition from the previous \"winter\" time.\n     *\n     * @param {Instant} instant - the instant to get the previous transition after, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the previous transition after the specified instant, null if this is before the first transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    previousTransition(instant){\n        notSupported('ZoneRules.previousTransition');\n    }\n\n    /**\n     * Gets the complete list of fully defined transitions.\n     * <p>\n     * The complete set of transitions for this rules instance is defined by this method\n     * and {@link #getTransitionRules()}. This method returns those transitions that have\n     * been fully defined. These are typically historical, but may be in the future.\n     * <p>\n     * The list will be empty for fixed offset rules and for any time-zone where there has\n     * only ever been a single offset. The list will also be empty if the transition rules are unknown.\n     *\n     * @return {ZoneOffsetTransition[]} an immutable list of fully defined transitions, not null\n     */\n    transitions(){\n        notSupported('ZoneRules.transitions');\n    }\n\n    /**\n     * Gets the list of transition rules for years beyond those defined in the transition list.\n     * <p>\n     * The complete set of transitions for this rules instance is defined by this method\n     * and {@link #getTransitions()}. This method returns instances of {@link ZoneOffsetTransitionRule}\n     * that define an algorithm for when transitions will occur.\n     * <p>\n     * For any given {@code ZoneRules}, this list contains the transition rules for years\n     * beyond those years that have been fully defined. These rules typically refer to future\n     * daylight saving time rule changes.\n     * <p>\n     * If the zone defines daylight savings into the future, then the list will normally\n     * be of size two and hold information about entering and exiting daylight savings.\n     * If the zone does not have daylight savings, or information about future changes\n     * is uncertain, then the list will be empty.\n     * <p>\n     * The list will be empty for fixed offset rules and for any time-zone where there is no\n     * daylight saving time. The list will also be empty if the transition rules are unknown.\n     *\n     * @return {ZoneOffsetTransitionRule[]} an immutable list of transition rules, not null\n     */\n    transitionRules(){\n        notSupported('ZoneRules.transitionRules');\n    }\n\n    /**\n     *\n     * @param other\n     * @returns {boolean}\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof MomentZoneRules) {\n            return this._tzdbInfo === other._tzdbInfo;\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this._tzdbInfo.name;\n    }\n}\n\nclass LDTUntils {\n    constructor(_tzdbUntils, tzdbOffsets) {\n        this._tzdbUntils = _tzdbUntils;\n        this._tzdbOffsets = tzdbOffsets;\n        this._ldtUntils = [];\n        this.size = this._tzdbUntils.length * 2;\n    }\n\n\n    _generateTupple(index) {\n        const epochMillis = this._tzdbUntils[index];\n        if (epochMillis === Infinity) {\n            return [LocalDateTime.MAX, LocalDateTime.MAX];\n        }\n        const instant = Instant.ofEpochMilli(epochMillis);\n\n        const offset1 = offsetInSeconds(this._tzdbOffsets[index]);\n        const zone1 = ZoneOffset.ofTotalSeconds(-offset1);\n        const ldt1 = LocalDateTime.ofInstant(instant, zone1);\n\n        const nextIndex = Math.min(index + 1, this._tzdbOffsets.length - 1);\n        const offset2 = offsetInSeconds(this._tzdbOffsets[nextIndex]);\n        const zone2 = ZoneOffset.ofTotalSeconds(-offset2);\n        const ldt2 = LocalDateTime.ofInstant(instant, zone2);\n\n        if(offset1 > offset2) {\n            return [ldt1, ldt2];\n        } else {\n            return [ldt2, ldt1];\n        }\n    }\n\n    _getTupple(index){\n        if (this._ldtUntils[index] == null) {\n            this._ldtUntils[index] = this._generateTupple(index);\n        }\n        return this._ldtUntils[index];\n    }\n\n    get(index) {\n        const ldtTupple = this._getTupple(index >> 1);\n        return ldtTupple[index % 2];\n    }\n}\n\n// modified bin-search, to always find existing indices for non-empty arrays\n// value in array at index is larger than input value (or last index of array)\nfunction ldtBinarySearch(array, value) {\n    let hi = array.size - 1, lo = -1, mid;\n    while (hi - lo > 1) {\n        if (!value.isBefore(array.get(mid = hi + lo >> 1))) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return hi;\n}\n\nfunction offsetInSeconds(tzdbOffset){\n    return roundDown(+tzdbOffset*60);\n}\n\nfunction roundDown(r){\n    if (r < 0) {\n        return Math.ceil(r);\n    } else {\n        return Math.floor(r);\n    }\n}\n\n// modified bin-search, to always find existing indices for non-empty arrays\n// value in array at index is larger than input value (or last index of array)\nfunction binarySearch(array, value) {\n    let hi = array.length - 1, lo = -1, mid;\n    while (hi - lo > 1) {\n        if (array[mid = hi + lo >> 1] <= value) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return hi;\n}\n\nfunction notSupported(msg){\n    throw new Error('not supported: ' + msg);\n}","/*\n * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport {\n    DateTimeException,\n    ZoneRulesProvider,\n} from 'js-joda';\n\nimport { MomentZoneRules } from './MomentZoneRules';\n\nimport { unpack } from './unpack';\n\nlet TZDB_DATA;\nlet TZDB_VERSION;\nconst AVAILABLE_ZONE_IDS = [];\n\nconst zones = {};\nconst links = {};\n\nexport class MomentZoneRulesProvider extends ZoneRulesProvider {\n    /**\n     * Gets the rules for the zone ID.\n     * <p>\n     * This returns the latest available rules for the zone ID.\n     * <p>\n     * This method relies on time-zone data provider files that are configured.\n     *\n     * @param {string} zoneId\n     * @return {ZoneRules}\n     */\n    static getRules(zoneId){\n        const tzdbZoneInfo = zones[links[zoneId]];\n        if(tzdbZoneInfo == null){\n            throw new DateTimeException('Unknown time-zone ID: ' + zoneId);\n        }\n        return new MomentZoneRules(tzdbZoneInfo);\n    }\n\n\n    /**\n     * Gets the set of available zone IDs.\n     * <p>\n     * These zone IDs are loaded and available for use by {@code ZoneId}.\n     *\n     * @return {string[]} a modifiable copy of the set of zone IDs, not null\n     */\n    static getAvailableZoneIds(){\n        return AVAILABLE_ZONE_IDS;\n    }\n\n    /**\n     *\n     * @return {string} the tzdb version.\n     */\n    static getVersion() {\n        return TZDB_VERSION;\n    }\n\n    /**\n     * Provides the packed tzdb data,\n     * the data has the same format as provided from moment-timezone.\n     *\n     * @return {object} the packed tzdb data.\n     */\n    static getTzdbData(){\n        return TZDB_DATA;\n    }\n\n    /**\n     * Sets the packed tzdb data.\n     * Accepts tzdb data in the same format as provided from moment-timezone.\n     *\n     * @param packedJson\n     */\n    static loadTzdbData(packedJson){\n        TZDB_DATA = packedJson;\n        TZDB_VERSION = packedJson.version;\n\n        for (const packedZoneInfo of packedJson.zones) {\n            const tzdbZoneInfo = unpack(packedZoneInfo);\n            AVAILABLE_ZONE_IDS.push(tzdbZoneInfo.name);\n            zones[tzdbZoneInfo.name] = tzdbZoneInfo;\n            links[tzdbZoneInfo.name] = tzdbZoneInfo.name;\n        }\n\n        for (const packedLink of packedJson.links) {\n            const link = packedLink.split('|');\n            AVAILABLE_ZONE_IDS.push(link[1]);\n            links[link[1]] = link[0];\n        }\n    }\n}","/*\n * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport plug from './plug';\n\nexport default plug;","/*\n * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MomentZoneRulesProvider } from './MomentZoneRulesProvider';\nimport extendSystemDefaultZoneId from './system-default-zone';\n\nexport default function (jsJoda) {\n    jsJoda.ZoneRulesProvider.getRules = MomentZoneRulesProvider.getRules;\n    jsJoda.ZoneRulesProvider.getAvailableZoneIds = MomentZoneRulesProvider.getAvailableZoneIds;\n    jsJoda.ZoneRulesProvider.getTzdbData = MomentZoneRulesProvider.getTzdbData;\n    jsJoda.ZoneRulesProvider.loadTzdbData = MomentZoneRulesProvider.loadTzdbData;\n\n    extendSystemDefaultZoneId(jsJoda.ZoneId);\n    return jsJoda;\n}\n","\nfunction getResolvedZoneId(ZoneId) {\n    try {\n        const resolvedTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        return ZoneId.of(resolvedTimeZone);\n    } catch (err) {\n        // ignore\n    }\n    return null;\n}\n\nexport default function extendSystemDefaultZoneId(ZoneId) {\n    const resolvedZoneId = getResolvedZoneId(ZoneId);\n\n    if (resolvedZoneId == null) {\n        return;\n    }\n\n    ZoneId.systemDefault = function () {\n        return resolvedZoneId;\n    };\n}","/* eslint-disable no-var */\n\n//! moment-timezone.js\n//! version : 0.5.2\n//! author : Tim Wood\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n/************************************\n Unpacking\n ************************************/\n\nfunction charCodeToInt(charCode) {\n    if (charCode > 96) {\n        return charCode - 87;\n    } else if (charCode > 64) {\n        return charCode - 29;\n    }\n    return charCode - 48;\n}\n\nfunction unpackBase60(string) {\n    var i = 0,\n        parts = string.split('.'),\n        whole = parts[0],\n        fractional = parts[1] || '',\n        multiplier = 1,\n        num,\n        out = 0,\n        sign = 1;\n\n    // handle negative numbers\n    if (string.charCodeAt(0) === 45) {\n        i = 1;\n        sign = -1;\n    }\n\n    // handle digits before the decimal\n    for (i; i < whole.length; i++) {\n        num = charCodeToInt(whole.charCodeAt(i));\n        out = 60 * out + num;\n    }\n\n    // handle digits after the decimal\n    for (i = 0; i < fractional.length; i++) {\n        multiplier = multiplier / 60;\n        num = charCodeToInt(fractional.charCodeAt(i));\n        out += num * multiplier;\n    }\n\n    return out * sign;\n}\n\nfunction arrayToInt (array) {\n    for (var i = 0; i < array.length; i++) {\n        array[i] = unpackBase60(array[i]);\n    }\n}\n\nfunction intToUntil (array, length) {\n    for (var i = 0; i < length; i++) {\n        array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\n    }\n\n    array[length - 1] = Infinity;\n}\n\nfunction mapIndices (source, indices) {\n    var out = [], i;\n\n    for (i = 0; i < indices.length; i++) {\n        out[i] = source[indices[i]];\n    }\n\n    return out;\n}\n\nexport function unpack (string) {\n    var data = string.split('|'),\n        offsets = data[2].split(' '),\n        indices = data[3].split(''),\n        untils  = data[4].split(' ');\n\n    arrayToInt(offsets);\n    arrayToInt(indices);\n    arrayToInt(untils);\n\n    intToUntil(untils, indices.length);\n\n    return {\n        name       : data[0],\n        abbrs      : mapIndices(data[1].split(' '), indices),\n        offsets    : mapIndices(offsets, indices),\n        untils     : untils,\n        population : data[5] | 0\n    };\n}\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE_js_joda__;"],"sourceRoot":""}